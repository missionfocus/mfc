// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIntegrationsDeleteSynchronizationParams creates a new IntegrationsDeleteSynchronizationParams object
// with the default values initialized.
func NewIntegrationsDeleteSynchronizationParams() *IntegrationsDeleteSynchronizationParams {
	var ()
	return &IntegrationsDeleteSynchronizationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIntegrationsDeleteSynchronizationParamsWithTimeout creates a new IntegrationsDeleteSynchronizationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIntegrationsDeleteSynchronizationParamsWithTimeout(timeout time.Duration) *IntegrationsDeleteSynchronizationParams {
	var ()
	return &IntegrationsDeleteSynchronizationParams{

		timeout: timeout,
	}
}

// NewIntegrationsDeleteSynchronizationParamsWithContext creates a new IntegrationsDeleteSynchronizationParams object
// with the default values initialized, and the ability to set a context for a request
func NewIntegrationsDeleteSynchronizationParamsWithContext(ctx context.Context) *IntegrationsDeleteSynchronizationParams {
	var ()
	return &IntegrationsDeleteSynchronizationParams{

		Context: ctx,
	}
}

// NewIntegrationsDeleteSynchronizationParamsWithHTTPClient creates a new IntegrationsDeleteSynchronizationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIntegrationsDeleteSynchronizationParamsWithHTTPClient(client *http.Client) *IntegrationsDeleteSynchronizationParams {
	var ()
	return &IntegrationsDeleteSynchronizationParams{
		HTTPClient: client,
	}
}

/*IntegrationsDeleteSynchronizationParams contains all the parameters to send to the API endpoint
for the integrations delete synchronization operation typically these are written to a http.Request
*/
type IntegrationsDeleteSynchronizationParams struct {

	/*AccountID
	  The account identifier.

	*/
	AccountID int32
	/*IntegrationID
	  The integration identifier.

	*/
	IntegrationID int32
	/*IsRepeated
	  If set to true to remove from schedule repeated task otherwise cancel executing job.

	*/
	IsRepeated *bool
	/*SyncType
	  Type of the synchronize.

	*/
	SyncType int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) WithTimeout(timeout time.Duration) *IntegrationsDeleteSynchronizationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) WithContext(ctx context.Context) *IntegrationsDeleteSynchronizationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) WithHTTPClient(client *http.Client) *IntegrationsDeleteSynchronizationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) WithAccountID(accountID int32) *IntegrationsDeleteSynchronizationParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithIntegrationID adds the integrationID to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) WithIntegrationID(integrationID int32) *IntegrationsDeleteSynchronizationParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) SetIntegrationID(integrationID int32) {
	o.IntegrationID = integrationID
}

// WithIsRepeated adds the isRepeated to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) WithIsRepeated(isRepeated *bool) *IntegrationsDeleteSynchronizationParams {
	o.SetIsRepeated(isRepeated)
	return o
}

// SetIsRepeated adds the isRepeated to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) SetIsRepeated(isRepeated *bool) {
	o.IsRepeated = isRepeated
}

// WithSyncType adds the syncType to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) WithSyncType(syncType int32) *IntegrationsDeleteSynchronizationParams {
	o.SetSyncType(syncType)
	return o
}

// SetSyncType adds the syncType to the integrations delete synchronization params
func (o *IntegrationsDeleteSynchronizationParams) SetSyncType(syncType int32) {
	o.SyncType = syncType
}

// WriteToRequest writes these params to a swagger request
func (o *IntegrationsDeleteSynchronizationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	// path param integrationId
	if err := r.SetPathParam("integrationId", swag.FormatInt32(o.IntegrationID)); err != nil {
		return err
	}

	if o.IsRepeated != nil {

		// query param isRepeated
		var qrIsRepeated bool
		if o.IsRepeated != nil {
			qrIsRepeated = *o.IsRepeated
		}
		qIsRepeated := swag.FormatBool(qrIsRepeated)
		if qIsRepeated != "" {
			if err := r.SetQueryParam("isRepeated", qIsRepeated); err != nil {
				return err
			}
		}

	}

	// query param syncType
	qrSyncType := o.SyncType
	qSyncType := swag.FormatInt32(qrSyncType)
	if qSyncType != "" {
		if err := r.SetQueryParam("syncType", qSyncType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
