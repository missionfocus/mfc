// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"git.missionfocus.com/ours/code/tools/tmetric-api/models"
)

// NewIntegrationsPutIntegrationParams creates a new IntegrationsPutIntegrationParams object
// with the default values initialized.
func NewIntegrationsPutIntegrationParams() *IntegrationsPutIntegrationParams {
	var ()
	return &IntegrationsPutIntegrationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIntegrationsPutIntegrationParamsWithTimeout creates a new IntegrationsPutIntegrationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIntegrationsPutIntegrationParamsWithTimeout(timeout time.Duration) *IntegrationsPutIntegrationParams {
	var ()
	return &IntegrationsPutIntegrationParams{

		timeout: timeout,
	}
}

// NewIntegrationsPutIntegrationParamsWithContext creates a new IntegrationsPutIntegrationParams object
// with the default values initialized, and the ability to set a context for a request
func NewIntegrationsPutIntegrationParamsWithContext(ctx context.Context) *IntegrationsPutIntegrationParams {
	var ()
	return &IntegrationsPutIntegrationParams{

		Context: ctx,
	}
}

// NewIntegrationsPutIntegrationParamsWithHTTPClient creates a new IntegrationsPutIntegrationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIntegrationsPutIntegrationParamsWithHTTPClient(client *http.Client) *IntegrationsPutIntegrationParams {
	var ()
	return &IntegrationsPutIntegrationParams{
		HTTPClient: client,
	}
}

/*IntegrationsPutIntegrationParams contains all the parameters to send to the API endpoint
for the integrations put integration operation typically these are written to a http.Request
*/
type IntegrationsPutIntegrationParams struct {

	/*AccountID*/
	AccountID string
	/*Integration*/
	Integration *models.Integration
	/*IntegrationID*/
	IntegrationID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) WithTimeout(timeout time.Duration) *IntegrationsPutIntegrationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) WithContext(ctx context.Context) *IntegrationsPutIntegrationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) WithHTTPClient(client *http.Client) *IntegrationsPutIntegrationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) WithAccountID(accountID string) *IntegrationsPutIntegrationParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithIntegration adds the integration to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) WithIntegration(integration *models.Integration) *IntegrationsPutIntegrationParams {
	o.SetIntegration(integration)
	return o
}

// SetIntegration adds the integration to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) SetIntegration(integration *models.Integration) {
	o.Integration = integration
}

// WithIntegrationID adds the integrationID to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) WithIntegrationID(integrationID int32) *IntegrationsPutIntegrationParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the integrations put integration params
func (o *IntegrationsPutIntegrationParams) SetIntegrationID(integrationID int32) {
	o.IntegrationID = integrationID
}

// WriteToRequest writes these params to a swagger request
func (o *IntegrationsPutIntegrationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID); err != nil {
		return err
	}

	if o.Integration != nil {
		if err := r.SetBodyParam(o.Integration); err != nil {
			return err
		}
	}

	// path param integrationId
	if err := r.SetPathParam("integrationId", swag.FormatInt32(o.IntegrationID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
