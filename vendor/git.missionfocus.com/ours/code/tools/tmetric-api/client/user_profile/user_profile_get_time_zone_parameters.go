// Code generated by go-swagger; DO NOT EDIT.

package user_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUserProfileGetTimeZoneParams creates a new UserProfileGetTimeZoneParams object
// with the default values initialized.
func NewUserProfileGetTimeZoneParams() *UserProfileGetTimeZoneParams {
	var ()
	return &UserProfileGetTimeZoneParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserProfileGetTimeZoneParamsWithTimeout creates a new UserProfileGetTimeZoneParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserProfileGetTimeZoneParamsWithTimeout(timeout time.Duration) *UserProfileGetTimeZoneParams {
	var ()
	return &UserProfileGetTimeZoneParams{

		timeout: timeout,
	}
}

// NewUserProfileGetTimeZoneParamsWithContext creates a new UserProfileGetTimeZoneParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserProfileGetTimeZoneParamsWithContext(ctx context.Context) *UserProfileGetTimeZoneParams {
	var ()
	return &UserProfileGetTimeZoneParams{

		Context: ctx,
	}
}

// NewUserProfileGetTimeZoneParamsWithHTTPClient creates a new UserProfileGetTimeZoneParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserProfileGetTimeZoneParamsWithHTTPClient(client *http.Client) *UserProfileGetTimeZoneParams {
	var ()
	return &UserProfileGetTimeZoneParams{
		HTTPClient: client,
	}
}

/*UserProfileGetTimeZoneParams contains all the parameters to send to the API endpoint
for the user profile get time zone operation typically these are written to a http.Request
*/
type UserProfileGetTimeZoneParams struct {

	/*Date
	  Date on which to get time zone info. This date internally converted to date in time zone of requested user.

	*/
	Date *strfmt.DateTime
	/*UserProfileID
	  Identifier of user to get time zone info

	*/
	UserProfileID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) WithTimeout(timeout time.Duration) *UserProfileGetTimeZoneParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) WithContext(ctx context.Context) *UserProfileGetTimeZoneParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) WithHTTPClient(client *http.Client) *UserProfileGetTimeZoneParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDate adds the date to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) WithDate(date *strfmt.DateTime) *UserProfileGetTimeZoneParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) SetDate(date *strfmt.DateTime) {
	o.Date = date
}

// WithUserProfileID adds the userProfileID to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) WithUserProfileID(userProfileID int32) *UserProfileGetTimeZoneParams {
	o.SetUserProfileID(userProfileID)
	return o
}

// SetUserProfileID adds the userProfileId to the user profile get time zone params
func (o *UserProfileGetTimeZoneParams) SetUserProfileID(userProfileID int32) {
	o.UserProfileID = userProfileID
}

// WriteToRequest writes these params to a swagger request
func (o *UserProfileGetTimeZoneParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Date != nil {

		// query param date
		var qrDate strfmt.DateTime
		if o.Date != nil {
			qrDate = *o.Date
		}
		qDate := qrDate.String()
		if qDate != "" {
			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}

	}

	// path param userProfileId
	if err := r.SetPathParam("userProfileId", swag.FormatInt32(o.UserProfileID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
