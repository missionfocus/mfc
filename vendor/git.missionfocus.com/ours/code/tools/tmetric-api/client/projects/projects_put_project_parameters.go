// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"git.missionfocus.com/ours/code/tools/tmetric-api/models"
)

// NewProjectsPutProjectParams creates a new ProjectsPutProjectParams object
// with the default values initialized.
func NewProjectsPutProjectParams() *ProjectsPutProjectParams {
	var ()
	return &ProjectsPutProjectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectsPutProjectParamsWithTimeout creates a new ProjectsPutProjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectsPutProjectParamsWithTimeout(timeout time.Duration) *ProjectsPutProjectParams {
	var ()
	return &ProjectsPutProjectParams{

		timeout: timeout,
	}
}

// NewProjectsPutProjectParamsWithContext creates a new ProjectsPutProjectParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectsPutProjectParamsWithContext(ctx context.Context) *ProjectsPutProjectParams {
	var ()
	return &ProjectsPutProjectParams{

		Context: ctx,
	}
}

// NewProjectsPutProjectParamsWithHTTPClient creates a new ProjectsPutProjectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectsPutProjectParamsWithHTTPClient(client *http.Client) *ProjectsPutProjectParams {
	var ()
	return &ProjectsPutProjectParams{
		HTTPClient: client,
	}
}

/*ProjectsPutProjectParams contains all the parameters to send to the API endpoint
for the projects put project operation typically these are written to a http.Request
*/
type ProjectsPutProjectParams struct {

	/*AccountID*/
	AccountID int32
	/*ClientProject*/
	ClientProject *models.Project
	/*ProjectID*/
	ProjectID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the projects put project params
func (o *ProjectsPutProjectParams) WithTimeout(timeout time.Duration) *ProjectsPutProjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the projects put project params
func (o *ProjectsPutProjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the projects put project params
func (o *ProjectsPutProjectParams) WithContext(ctx context.Context) *ProjectsPutProjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the projects put project params
func (o *ProjectsPutProjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the projects put project params
func (o *ProjectsPutProjectParams) WithHTTPClient(client *http.Client) *ProjectsPutProjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the projects put project params
func (o *ProjectsPutProjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the projects put project params
func (o *ProjectsPutProjectParams) WithAccountID(accountID int32) *ProjectsPutProjectParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the projects put project params
func (o *ProjectsPutProjectParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithClientProject adds the clientProject to the projects put project params
func (o *ProjectsPutProjectParams) WithClientProject(clientProject *models.Project) *ProjectsPutProjectParams {
	o.SetClientProject(clientProject)
	return o
}

// SetClientProject adds the clientProject to the projects put project params
func (o *ProjectsPutProjectParams) SetClientProject(clientProject *models.Project) {
	o.ClientProject = clientProject
}

// WithProjectID adds the projectID to the projects put project params
func (o *ProjectsPutProjectParams) WithProjectID(projectID int32) *ProjectsPutProjectParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the projects put project params
func (o *ProjectsPutProjectParams) SetProjectID(projectID int32) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectsPutProjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.ClientProject != nil {
		if err := r.SetBodyParam(o.ClientProject); err != nil {
			return err
		}
	}

	// path param projectId
	if err := r.SetPathParam("projectId", swag.FormatInt32(o.ProjectID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
