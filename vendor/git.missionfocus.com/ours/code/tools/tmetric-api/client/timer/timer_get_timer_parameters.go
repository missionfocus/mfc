// Code generated by go-swagger; DO NOT EDIT.

package timer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTimerGetTimerParams creates a new TimerGetTimerParams object
// with the default values initialized.
func NewTimerGetTimerParams() *TimerGetTimerParams {
	var ()
	return &TimerGetTimerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTimerGetTimerParamsWithTimeout creates a new TimerGetTimerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimerGetTimerParamsWithTimeout(timeout time.Duration) *TimerGetTimerParams {
	var ()
	return &TimerGetTimerParams{

		timeout: timeout,
	}
}

// NewTimerGetTimerParamsWithContext creates a new TimerGetTimerParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimerGetTimerParamsWithContext(ctx context.Context) *TimerGetTimerParams {
	var ()
	return &TimerGetTimerParams{

		Context: ctx,
	}
}

// NewTimerGetTimerParamsWithHTTPClient creates a new TimerGetTimerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimerGetTimerParamsWithHTTPClient(client *http.Client) *TimerGetTimerParams {
	var ()
	return &TimerGetTimerParams{
		HTTPClient: client,
	}
}

/*TimerGetTimerParams contains all the parameters to send to the API endpoint
for the timer get timer operation typically these are written to a http.Request
*/
type TimerGetTimerParams struct {

	/*AccountID*/
	AccountID int32
	/*IncludeBalance*/
	IncludeBalance *bool
	/*UseUtcTime*/
	UseUtcTime *bool
	/*UserProfileID*/
	UserProfileID *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the timer get timer params
func (o *TimerGetTimerParams) WithTimeout(timeout time.Duration) *TimerGetTimerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the timer get timer params
func (o *TimerGetTimerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the timer get timer params
func (o *TimerGetTimerParams) WithContext(ctx context.Context) *TimerGetTimerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the timer get timer params
func (o *TimerGetTimerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the timer get timer params
func (o *TimerGetTimerParams) WithHTTPClient(client *http.Client) *TimerGetTimerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the timer get timer params
func (o *TimerGetTimerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the timer get timer params
func (o *TimerGetTimerParams) WithAccountID(accountID int32) *TimerGetTimerParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the timer get timer params
func (o *TimerGetTimerParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithIncludeBalance adds the includeBalance to the timer get timer params
func (o *TimerGetTimerParams) WithIncludeBalance(includeBalance *bool) *TimerGetTimerParams {
	o.SetIncludeBalance(includeBalance)
	return o
}

// SetIncludeBalance adds the includeBalance to the timer get timer params
func (o *TimerGetTimerParams) SetIncludeBalance(includeBalance *bool) {
	o.IncludeBalance = includeBalance
}

// WithUseUtcTime adds the useUtcTime to the timer get timer params
func (o *TimerGetTimerParams) WithUseUtcTime(useUtcTime *bool) *TimerGetTimerParams {
	o.SetUseUtcTime(useUtcTime)
	return o
}

// SetUseUtcTime adds the useUtcTime to the timer get timer params
func (o *TimerGetTimerParams) SetUseUtcTime(useUtcTime *bool) {
	o.UseUtcTime = useUtcTime
}

// WithUserProfileID adds the userProfileID to the timer get timer params
func (o *TimerGetTimerParams) WithUserProfileID(userProfileID *int32) *TimerGetTimerParams {
	o.SetUserProfileID(userProfileID)
	return o
}

// SetUserProfileID adds the userProfileId to the timer get timer params
func (o *TimerGetTimerParams) SetUserProfileID(userProfileID *int32) {
	o.UserProfileID = userProfileID
}

// WriteToRequest writes these params to a swagger request
func (o *TimerGetTimerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.IncludeBalance != nil {

		// query param includeBalance
		var qrIncludeBalance bool
		if o.IncludeBalance != nil {
			qrIncludeBalance = *o.IncludeBalance
		}
		qIncludeBalance := swag.FormatBool(qrIncludeBalance)
		if qIncludeBalance != "" {
			if err := r.SetQueryParam("includeBalance", qIncludeBalance); err != nil {
				return err
			}
		}

	}

	if o.UseUtcTime != nil {

		// query param useUtcTime
		var qrUseUtcTime bool
		if o.UseUtcTime != nil {
			qrUseUtcTime = *o.UseUtcTime
		}
		qUseUtcTime := swag.FormatBool(qrUseUtcTime)
		if qUseUtcTime != "" {
			if err := r.SetQueryParam("useUtcTime", qUseUtcTime); err != nil {
				return err
			}
		}

	}

	if o.UserProfileID != nil {

		// query param userProfileId
		var qrUserProfileID int32
		if o.UserProfileID != nil {
			qrUserProfileID = *o.UserProfileID
		}
		qUserProfileID := swag.FormatInt32(qrUserProfileID)
		if qUserProfileID != "" {
			if err := r.SetQueryParam("userProfileId", qUserProfileID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
