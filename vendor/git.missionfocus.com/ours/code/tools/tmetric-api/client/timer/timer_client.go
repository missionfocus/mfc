// Code generated by go-swagger; DO NOT EDIT.

package timer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new timer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for timer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TimerGetTimer(params *TimerGetTimerParams, authInfo runtime.ClientAuthInfoWriter) (*TimerGetTimerOK, error)

	TimerPostIssueTimer(params *TimerPostIssueTimerParams, authInfo runtime.ClientAuthInfoWriter) (*TimerPostIssueTimerOK, error)

	TimerPostTimer(params *TimerPostTimerParams, authInfo runtime.ClientAuthInfoWriter) (*TimerPostTimerOK, error)

	TimerPutTimer(params *TimerPutTimerParams, authInfo runtime.ClientAuthInfoWriter) (*TimerPutTimerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TimerGetTimer gets timer for specific member
*/
func (a *Client) TimerGetTimer(params *TimerGetTimerParams, authInfo runtime.ClientAuthInfoWriter) (*TimerGetTimerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimerGetTimerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Timer_GetTimer",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/timer",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimerGetTimerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimerGetTimerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timer_GetTimer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimerPostIssueTimer creates timer from issue
*/
func (a *Client) TimerPostIssueTimer(params *TimerPostIssueTimerParams, authInfo runtime.ClientAuthInfoWriter) (*TimerPostIssueTimerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimerPostIssueTimerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Timer_PostIssueTimer",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/timer/issue",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimerPostIssueTimerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimerPostIssueTimerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timer_PostIssueTimer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimerPostTimer creates timer from extension
*/
func (a *Client) TimerPostTimer(params *TimerPostTimerParams, authInfo runtime.ClientAuthInfoWriter) (*TimerPostTimerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimerPostTimerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Timer_PostTimer",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/timer/external",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimerPostTimerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimerPostTimerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timer_PostTimer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimerPutTimer edits timer
*/
func (a *Client) TimerPutTimer(params *TimerPutTimerParams, authInfo runtime.ClientAuthInfoWriter) (*TimerPutTimerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimerPutTimerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Timer_PutTimer",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{accountId}/timer",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimerPutTimerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimerPutTimerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Timer_PutTimer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
