// Code generated by go-swagger; DO NOT EDIT.

package timer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"git.missionfocus.com/ours/code/tools/tmetric-api/models"
)

// NewTimerPutTimerParams creates a new TimerPutTimerParams object
// with the default values initialized.
func NewTimerPutTimerParams() *TimerPutTimerParams {
	var ()
	return &TimerPutTimerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTimerPutTimerParamsWithTimeout creates a new TimerPutTimerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimerPutTimerParamsWithTimeout(timeout time.Duration) *TimerPutTimerParams {
	var ()
	return &TimerPutTimerParams{

		timeout: timeout,
	}
}

// NewTimerPutTimerParamsWithContext creates a new TimerPutTimerParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimerPutTimerParamsWithContext(ctx context.Context) *TimerPutTimerParams {
	var ()
	return &TimerPutTimerParams{

		Context: ctx,
	}
}

// NewTimerPutTimerParamsWithHTTPClient creates a new TimerPutTimerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimerPutTimerParamsWithHTTPClient(client *http.Client) *TimerPutTimerParams {
	var ()
	return &TimerPutTimerParams{
		HTTPClient: client,
	}
}

/*TimerPutTimerParams contains all the parameters to send to the API endpoint
for the timer put timer operation typically these are written to a http.Request
*/
type TimerPutTimerParams struct {

	/*AccountID*/
	AccountID int32
	/*IsExternal*/
	IsExternal *bool
	/*Timer*/
	Timer *models.Timer

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the timer put timer params
func (o *TimerPutTimerParams) WithTimeout(timeout time.Duration) *TimerPutTimerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the timer put timer params
func (o *TimerPutTimerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the timer put timer params
func (o *TimerPutTimerParams) WithContext(ctx context.Context) *TimerPutTimerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the timer put timer params
func (o *TimerPutTimerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the timer put timer params
func (o *TimerPutTimerParams) WithHTTPClient(client *http.Client) *TimerPutTimerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the timer put timer params
func (o *TimerPutTimerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the timer put timer params
func (o *TimerPutTimerParams) WithAccountID(accountID int32) *TimerPutTimerParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the timer put timer params
func (o *TimerPutTimerParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithIsExternal adds the isExternal to the timer put timer params
func (o *TimerPutTimerParams) WithIsExternal(isExternal *bool) *TimerPutTimerParams {
	o.SetIsExternal(isExternal)
	return o
}

// SetIsExternal adds the isExternal to the timer put timer params
func (o *TimerPutTimerParams) SetIsExternal(isExternal *bool) {
	o.IsExternal = isExternal
}

// WithTimer adds the timer to the timer put timer params
func (o *TimerPutTimerParams) WithTimer(timer *models.Timer) *TimerPutTimerParams {
	o.SetTimer(timer)
	return o
}

// SetTimer adds the timer to the timer put timer params
func (o *TimerPutTimerParams) SetTimer(timer *models.Timer) {
	o.Timer = timer
}

// WriteToRequest writes these params to a swagger request
func (o *TimerPutTimerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.IsExternal != nil {

		// query param isExternal
		var qrIsExternal bool
		if o.IsExternal != nil {
			qrIsExternal = *o.IsExternal
		}
		qIsExternal := swag.FormatBool(qrIsExternal)
		if qIsExternal != "" {
			if err := r.SetQueryParam("isExternal", qIsExternal); err != nil {
				return err
			}
		}

	}

	if o.Timer != nil {
		if err := r.SetBodyParam(o.Timer); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
