// Code generated by go-swagger; DO NOT EDIT.

package time_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTimeEntriesGetGroupTimeEntriesParams creates a new TimeEntriesGetGroupTimeEntriesParams object
// with the default values initialized.
func NewTimeEntriesGetGroupTimeEntriesParams() *TimeEntriesGetGroupTimeEntriesParams {
	var ()
	return &TimeEntriesGetGroupTimeEntriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTimeEntriesGetGroupTimeEntriesParamsWithTimeout creates a new TimeEntriesGetGroupTimeEntriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimeEntriesGetGroupTimeEntriesParamsWithTimeout(timeout time.Duration) *TimeEntriesGetGroupTimeEntriesParams {
	var ()
	return &TimeEntriesGetGroupTimeEntriesParams{

		timeout: timeout,
	}
}

// NewTimeEntriesGetGroupTimeEntriesParamsWithContext creates a new TimeEntriesGetGroupTimeEntriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimeEntriesGetGroupTimeEntriesParamsWithContext(ctx context.Context) *TimeEntriesGetGroupTimeEntriesParams {
	var ()
	return &TimeEntriesGetGroupTimeEntriesParams{

		Context: ctx,
	}
}

// NewTimeEntriesGetGroupTimeEntriesParamsWithHTTPClient creates a new TimeEntriesGetGroupTimeEntriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimeEntriesGetGroupTimeEntriesParamsWithHTTPClient(client *http.Client) *TimeEntriesGetGroupTimeEntriesParams {
	var ()
	return &TimeEntriesGetGroupTimeEntriesParams{
		HTTPClient: client,
	}
}

/*TimeEntriesGetGroupTimeEntriesParams contains all the parameters to send to the API endpoint
for the time entries get group time entries operation typically these are written to a http.Request
*/
type TimeEntriesGetGroupTimeEntriesParams struct {

	/*AccountID*/
	AccountID int32
	/*TimeRangeEndTime*/
	TimeRangeEndTime *strfmt.DateTime
	/*TimeRangeStartTime*/
	TimeRangeStartTime *strfmt.DateTime
	/*UseUtcTime*/
	UseUtcTime *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) WithTimeout(timeout time.Duration) *TimeEntriesGetGroupTimeEntriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) WithContext(ctx context.Context) *TimeEntriesGetGroupTimeEntriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) WithHTTPClient(client *http.Client) *TimeEntriesGetGroupTimeEntriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) WithAccountID(accountID int32) *TimeEntriesGetGroupTimeEntriesParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithTimeRangeEndTime adds the timeRangeEndTime to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) WithTimeRangeEndTime(timeRangeEndTime *strfmt.DateTime) *TimeEntriesGetGroupTimeEntriesParams {
	o.SetTimeRangeEndTime(timeRangeEndTime)
	return o
}

// SetTimeRangeEndTime adds the timeRangeEndTime to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) SetTimeRangeEndTime(timeRangeEndTime *strfmt.DateTime) {
	o.TimeRangeEndTime = timeRangeEndTime
}

// WithTimeRangeStartTime adds the timeRangeStartTime to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) WithTimeRangeStartTime(timeRangeStartTime *strfmt.DateTime) *TimeEntriesGetGroupTimeEntriesParams {
	o.SetTimeRangeStartTime(timeRangeStartTime)
	return o
}

// SetTimeRangeStartTime adds the timeRangeStartTime to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) SetTimeRangeStartTime(timeRangeStartTime *strfmt.DateTime) {
	o.TimeRangeStartTime = timeRangeStartTime
}

// WithUseUtcTime adds the useUtcTime to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) WithUseUtcTime(useUtcTime *bool) *TimeEntriesGetGroupTimeEntriesParams {
	o.SetUseUtcTime(useUtcTime)
	return o
}

// SetUseUtcTime adds the useUtcTime to the time entries get group time entries params
func (o *TimeEntriesGetGroupTimeEntriesParams) SetUseUtcTime(useUtcTime *bool) {
	o.UseUtcTime = useUtcTime
}

// WriteToRequest writes these params to a swagger request
func (o *TimeEntriesGetGroupTimeEntriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.TimeRangeEndTime != nil {

		// query param timeRange.endTime
		var qrTimeRangeEndTime strfmt.DateTime
		if o.TimeRangeEndTime != nil {
			qrTimeRangeEndTime = *o.TimeRangeEndTime
		}
		qTimeRangeEndTime := qrTimeRangeEndTime.String()
		if qTimeRangeEndTime != "" {
			if err := r.SetQueryParam("timeRange.endTime", qTimeRangeEndTime); err != nil {
				return err
			}
		}

	}

	if o.TimeRangeStartTime != nil {

		// query param timeRange.startTime
		var qrTimeRangeStartTime strfmt.DateTime
		if o.TimeRangeStartTime != nil {
			qrTimeRangeStartTime = *o.TimeRangeStartTime
		}
		qTimeRangeStartTime := qrTimeRangeStartTime.String()
		if qTimeRangeStartTime != "" {
			if err := r.SetQueryParam("timeRange.startTime", qTimeRangeStartTime); err != nil {
				return err
			}
		}

	}

	if o.UseUtcTime != nil {

		// query param useUtcTime
		var qrUseUtcTime bool
		if o.UseUtcTime != nil {
			qrUseUtcTime = *o.UseUtcTime
		}
		qUseUtcTime := swag.FormatBool(qrUseUtcTime)
		if qUseUtcTime != "" {
			if err := r.SetQueryParam("useUtcTime", qUseUtcTime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
