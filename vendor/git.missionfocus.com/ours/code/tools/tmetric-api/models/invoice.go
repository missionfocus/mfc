// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Invoice invoice
//
// swagger:model Invoice
type Invoice struct {

	// account Id
	AccountID int32 `json:"accountId,omitempty"`

	// client Id
	ClientID int32 `json:"clientId,omitempty"`

	// currency
	// Required: true
	Currency *string `json:"currency"`

	// discount amount
	// Read Only: true
	DiscountAmount float64 `json:"discountAmount,omitempty"`

	// discount percents
	// Maximum: 100
	// Minimum: 0
	DiscountPercents *float32 `json:"discountPercents,omitempty"`

	// due days
	DueDays int32 `json:"dueDays,omitempty"`

	// invoice Id
	InvoiceID int32 `json:"invoiceId,omitempty"`

	// invoice type
	// Enum: [0 1 2 3]
	InvoiceType int32 `json:"invoiceType,omitempty"`

	// issue date
	// Format: date-time
	IssueDate strfmt.DateTime `json:"issueDate,omitempty"`

	// items
	Items []*InvoiceItem `json:"items"`

	// purchase order number
	PurchaseOrderNumber string `json:"purchaseOrderNumber,omitempty"`

	// status
	// Enum: [0 1 2]
	Status int32 `json:"status,omitempty"`

	// subject
	Subject string `json:"subject,omitempty"`

	// subtotal amount
	SubtotalAmount float64 `json:"subtotalAmount,omitempty"`

	// tax amount
	// Read Only: true
	TaxAmount float64 `json:"taxAmount,omitempty"`

	// tax percents
	// Maximum: 100
	// Minimum: 0
	TaxPercents *float32 `json:"taxPercents,omitempty"`

	// text Id
	// Required: true
	TextID *string `json:"textId"`

	// total amount
	// Read Only: true
	TotalAmount float64 `json:"totalAmount,omitempty"`
}

// Validate validates this invoice
func (m *Invoice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountPercents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxPercents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Invoice) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateDiscountPercents(formats strfmt.Registry) error {

	if swag.IsZero(m.DiscountPercents) { // not required
		return nil
	}

	if err := validate.Minimum("discountPercents", "body", float64(*m.DiscountPercents), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("discountPercents", "body", float64(*m.DiscountPercents), 100, false); err != nil {
		return err
	}

	return nil
}

var invoiceTypeInvoiceTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceTypeInvoiceTypePropEnum = append(invoiceTypeInvoiceTypePropEnum, v)
	}
}

// prop value enum
func (m *Invoice) validateInvoiceTypeEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, invoiceTypeInvoiceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Invoice) validateInvoiceType(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateInvoiceTypeEnum("invoiceType", "body", m.InvoiceType); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateIssueDate(formats strfmt.Registry) error {

	if swag.IsZero(m.IssueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("issueDate", "body", "date-time", m.IssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var invoiceTypeStatusPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceTypeStatusPropEnum = append(invoiceTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *Invoice) validateStatusEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, invoiceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Invoice) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateTaxPercents(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxPercents) { // not required
		return nil
	}

	if err := validate.Minimum("taxPercents", "body", float64(*m.TaxPercents), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("taxPercents", "body", float64(*m.TaxPercents), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateTextID(formats strfmt.Registry) error {

	if err := validate.Required("textId", "body", m.TextID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Invoice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Invoice) UnmarshalBinary(b []byte) error {
	var res Invoice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
