// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountMember account member
//
// swagger:model AccountMember
type AccountMember struct {

	// account Id
	AccountID int32 `json:"accountId,omitempty"`

	// account member Id
	AccountMemberID int32 `json:"accountMemberId,omitempty"`

	// Gets or sets the account member scope.
	AccountMemberScope *AccountMemberScope `json:"accountMemberScope,omitempty"`

	// activity capture settings
	ActivityCaptureSettings *ActivityCaptureSettingsMap `json:"activityCaptureSettings,omitempty"`

	// client Id
	ClientID int32 `json:"clientId,omitempty"`

	// cost rate
	CostRate *Rate `json:"costRate,omitempty"`

	// cost rate apply date
	// Format: date-time
	CostRateApplyDate strfmt.DateTime `json:"costRateApplyDate,omitempty"`

	// default billable rate
	DefaultBillableRate *Rate `json:"defaultBillableRate,omitempty"`

	// default work type Id
	DefaultWorkTypeID int32 `json:"defaultWorkTypeId,omitempty"`

	// permissions
	Permissions *AccountPermissionsMap `json:"permissions,omitempty"`

	// required fields
	RequiredFields *RequiredFieldsMap `json:"requiredFields,omitempty"`

	// role
	// Enum: [0 1 2 3]
	Role int32 `json:"role,omitempty"`

	// status
	// Enum: [0 1 2]
	Status int32 `json:"status,omitempty"`

	// user profile
	UserProfile *UserProfile `json:"userProfile,omitempty"`

	// user profile Id
	UserProfileID int32 `json:"userProfileId,omitempty"`

	// working hours
	// Maximum: 24
	// Minimum: 0
	WorkingHours *float64 `json:"workingHours,omitempty"`
}

// Validate validates this account member
func (m *AccountMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountMemberScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivityCaptureSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostRateApplyDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultBillableRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkingHours(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountMember) validateAccountMemberScope(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountMemberScope) { // not required
		return nil
	}

	if m.AccountMemberScope != nil {
		if err := m.AccountMemberScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountMemberScope")
			}
			return err
		}
	}

	return nil
}

func (m *AccountMember) validateActivityCaptureSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityCaptureSettings) { // not required
		return nil
	}

	if m.ActivityCaptureSettings != nil {
		if err := m.ActivityCaptureSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activityCaptureSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AccountMember) validateCostRate(formats strfmt.Registry) error {

	if swag.IsZero(m.CostRate) { // not required
		return nil
	}

	if m.CostRate != nil {
		if err := m.CostRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costRate")
			}
			return err
		}
	}

	return nil
}

func (m *AccountMember) validateCostRateApplyDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CostRateApplyDate) { // not required
		return nil
	}

	if err := validate.FormatOf("costRateApplyDate", "body", "date-time", m.CostRateApplyDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountMember) validateDefaultBillableRate(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultBillableRate) { // not required
		return nil
	}

	if m.DefaultBillableRate != nil {
		if err := m.DefaultBillableRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultBillableRate")
			}
			return err
		}
	}

	return nil
}

func (m *AccountMember) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *AccountMember) validateRequiredFields(formats strfmt.Registry) error {

	if swag.IsZero(m.RequiredFields) { // not required
		return nil
	}

	if m.RequiredFields != nil {
		if err := m.RequiredFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requiredFields")
			}
			return err
		}
	}

	return nil
}

var accountMemberTypeRolePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountMemberTypeRolePropEnum = append(accountMemberTypeRolePropEnum, v)
	}
}

// prop value enum
func (m *AccountMember) validateRoleEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, accountMemberTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountMember) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

var accountMemberTypeStatusPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountMemberTypeStatusPropEnum = append(accountMemberTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *AccountMember) validateStatusEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, accountMemberTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountMember) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AccountMember) validateUserProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.UserProfile) { // not required
		return nil
	}

	if m.UserProfile != nil {
		if err := m.UserProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userProfile")
			}
			return err
		}
	}

	return nil
}

func (m *AccountMember) validateWorkingHours(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkingHours) { // not required
		return nil
	}

	if err := validate.Minimum("workingHours", "body", float64(*m.WorkingHours), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("workingHours", "body", float64(*m.WorkingHours), 24, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountMember) UnmarshalBinary(b []byte) error {
	var res AccountMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
