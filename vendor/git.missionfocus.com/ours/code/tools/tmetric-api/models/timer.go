// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Timer Represents the timer abstraction.
//
// swagger:model Timer
type Timer struct {

	// Gets or sets the current task description.
	Details *TimeEntryDetail `json:"details,omitempty"`

	// Gets or sets a value indicating current time of timer.
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// Gets or sets the billable status.
	IsBillable bool `json:"isBillable,omitempty"`

	// Gets or sets a value indicating whether the timer is long.
	IsLong bool `json:"isLong,omitempty"`

	// Gets or sets a value indicating whether the timer is started.
	IsStarted bool `json:"isStarted,omitempty"`

	// Gets or sets a value indicating monthly balance in milliseconds, excluding active timer.
	MonthlyBalance int64 `json:"monthlyBalance,omitempty"`

	// Gets or sets the timer's start time.
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Gets or sets the tags identifiers.
	TagsIdentifiers []int32 `json:"tagsIdentifiers"`
}

// Validate validates this timer
func (m *Timer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Timer) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if m.Details != nil {
		if err := m.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (m *Timer) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Timer) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Timer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Timer) UnmarshalBinary(b []byte) error {
	var res Timer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
