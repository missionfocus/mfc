// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SummaryStaffReportRow summary staff report row
//
// swagger:model SummaryStaffReportRow
type SummaryStaffReportRow struct {

	// activity level
	ActivityLevel float64 `json:"activityLevel,omitempty"`

	// billable amount
	BillableAmount []*Money `json:"billableAmount"`

	// billable duration
	BillableDuration float64 `json:"billableDuration,omitempty"`

	// costs
	Costs []*Money `json:"costs"`

	// duration
	Duration float64 `json:"duration,omitempty"`

	// online time
	OnlineTime float64 `json:"onlineTime,omitempty"`

	// paid time off hours
	PaidTimeOffHours float64 `json:"paidTimeOffHours,omitempty"`

	// time balance
	TimeBalance float64 `json:"timeBalance,omitempty"`

	// timer
	Timer *Timer `json:"timer,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// user profile Id
	UserProfileID int32 `json:"userProfileId,omitempty"`

	// workdays
	Workdays int32 `json:"workdays,omitempty"`
}

// Validate validates this summary staff report row
func (m *SummaryStaffReportRow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillableAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryStaffReportRow) validateBillableAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.BillableAmount) { // not required
		return nil
	}

	for i := 0; i < len(m.BillableAmount); i++ {
		if swag.IsZero(m.BillableAmount[i]) { // not required
			continue
		}

		if m.BillableAmount[i] != nil {
			if err := m.BillableAmount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billableAmount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummaryStaffReportRow) validateCosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Costs) { // not required
		return nil
	}

	for i := 0; i < len(m.Costs); i++ {
		if swag.IsZero(m.Costs[i]) { // not required
			continue
		}

		if m.Costs[i] != nil {
			if err := m.Costs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummaryStaffReportRow) validateTimer(formats strfmt.Registry) error {

	if swag.IsZero(m.Timer) { // not required
		return nil
	}

	if m.Timer != nil {
		if err := m.Timer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummaryStaffReportRow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummaryStaffReportRow) UnmarshalBinary(b []byte) error {
	var res SummaryStaffReportRow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
