// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeEntry time entry
//
// swagger:model TimeEntry
type TimeEntry struct {

	// details
	Details *TimeEntryDetail `json:"details,omitempty"`

	// Gets or sets the end time value for a external data contract. If EndTime == null this means that the time entry is active.
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// is billable
	IsBillable bool `json:"isBillable,omitempty"`

	// is deleted
	IsDeleted bool `json:"isDeleted,omitempty"`

	// is invoiced
	IsInvoiced bool `json:"isInvoiced,omitempty"`

	// Fill it on our own if needed.
	ProjectName string `json:"projectName,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Gets or sets the tags identifiers.
	TagsIdentifiers []int32 `json:"tagsIdentifiers"`

	// time entry Id
	TimeEntryID int64 `json:"timeEntryId,omitempty"`

	// timer duration
	TimerDuration int64 `json:"timerDuration,omitempty"`
}

// Validate validates this time entry
func (m *TimeEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeEntry) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if m.Details != nil {
		if err := m.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (m *TimeEntry) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeEntry) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeEntry) UnmarshalBinary(b []byte) error {
	var res TimeEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
