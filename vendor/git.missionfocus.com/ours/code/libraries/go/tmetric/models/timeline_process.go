// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimelineProcess Stores the information about the process that was active during a timeline entry.
//
// swagger:model TimelineProcess
type TimelineProcess struct {

	// Account Id
	// Required: true
	AccountID *string `json:"accountId"`

	// Gets or sets the name of the main process module (.exe file).
	// Required: true
	ProcessName *string `json:"processName"`

	// Timeline process ID
	// Required: true
	TimelineProcessID *string `json:"timelineProcessId"`
}

// Validate validates this timeline process
func (m *TimelineProcess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineProcessID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimelineProcess) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *TimelineProcess) validateProcessName(formats strfmt.Registry) error {

	if err := validate.Required("processName", "body", m.ProcessName); err != nil {
		return err
	}

	return nil
}

func (m *TimelineProcess) validateTimelineProcessID(formats strfmt.Registry) error {

	if err := validate.Required("timelineProcessId", "body", m.TimelineProcessID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimelineProcess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimelineProcess) UnmarshalBinary(b []byte) error {
	var res TimelineProcess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
