// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Integration integration
//
// swagger:model Integration
type Integration struct {

	// access key
	AccessKey string `json:"accessKey,omitempty"`

	// account Id
	AccountID int32 `json:"accountId,omitempty"`

	// agjust estimates automatically
	AgjustEstimatesAutomatically bool `json:"agjustEstimatesAutomatically,omitempty"`

	// application Url
	// Required: true
	ApplicationURL *string `json:"applicationUrl"`

	// default work type
	DefaultWorkType string `json:"defaultWorkType,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// has access key
	HasAccessKey bool `json:"hasAccessKey,omitempty"`

	// integration Id
	IntegrationID int32 `json:"integrationId,omitempty"`

	// integration type
	// Required: true
	IntegrationType *string `json:"integrationType"`

	// is time synchronization enabled
	IsTimeSynchronizationEnabled bool `json:"isTimeSynchronizationEnabled,omitempty"`

	// map work types
	MapWorkTypes bool `json:"mapWorkTypes,omitempty"`

	// show issue Id
	ShowIssueID bool `json:"showIssueId,omitempty"`
}

// Validate validates this integration
func (m *Integration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Integration) validateApplicationURL(formats strfmt.Registry) error {

	if err := validate.Required("applicationUrl", "body", m.ApplicationURL); err != nil {
		return err
	}

	return nil
}

func (m *Integration) validateIntegrationType(formats strfmt.Registry) error {

	if err := validate.Required("integrationType", "body", m.IntegrationType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Integration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Integration) UnmarshalBinary(b []byte) error {
	var res Integration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
