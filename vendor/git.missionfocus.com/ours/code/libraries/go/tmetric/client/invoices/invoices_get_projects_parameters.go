// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewInvoicesGetProjectsParams creates a new InvoicesGetProjectsParams object
// with the default values initialized.
func NewInvoicesGetProjectsParams() *InvoicesGetProjectsParams {
	var ()
	return &InvoicesGetProjectsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewInvoicesGetProjectsParamsWithTimeout creates a new InvoicesGetProjectsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInvoicesGetProjectsParamsWithTimeout(timeout time.Duration) *InvoicesGetProjectsParams {
	var ()
	return &InvoicesGetProjectsParams{

		timeout: timeout,
	}
}

// NewInvoicesGetProjectsParamsWithContext creates a new InvoicesGetProjectsParams object
// with the default values initialized, and the ability to set a context for a request
func NewInvoicesGetProjectsParamsWithContext(ctx context.Context) *InvoicesGetProjectsParams {
	var ()
	return &InvoicesGetProjectsParams{

		Context: ctx,
	}
}

// NewInvoicesGetProjectsParamsWithHTTPClient creates a new InvoicesGetProjectsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInvoicesGetProjectsParamsWithHTTPClient(client *http.Client) *InvoicesGetProjectsParams {
	var ()
	return &InvoicesGetProjectsParams{
		HTTPClient: client,
	}
}

/*InvoicesGetProjectsParams contains all the parameters to send to the API endpoint
for the invoices get projects operation typically these are written to a http.Request
*/
type InvoicesGetProjectsParams struct {

	/*AccountID*/
	AccountID int32
	/*ClientID*/
	ClientID int32
	/*TimeRangeEndTime*/
	TimeRangeEndTime *strfmt.DateTime
	/*TimeRangeStartTime*/
	TimeRangeStartTime *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the invoices get projects params
func (o *InvoicesGetProjectsParams) WithTimeout(timeout time.Duration) *InvoicesGetProjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invoices get projects params
func (o *InvoicesGetProjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invoices get projects params
func (o *InvoicesGetProjectsParams) WithContext(ctx context.Context) *InvoicesGetProjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invoices get projects params
func (o *InvoicesGetProjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invoices get projects params
func (o *InvoicesGetProjectsParams) WithHTTPClient(client *http.Client) *InvoicesGetProjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invoices get projects params
func (o *InvoicesGetProjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the invoices get projects params
func (o *InvoicesGetProjectsParams) WithAccountID(accountID int32) *InvoicesGetProjectsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the invoices get projects params
func (o *InvoicesGetProjectsParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithClientID adds the clientID to the invoices get projects params
func (o *InvoicesGetProjectsParams) WithClientID(clientID int32) *InvoicesGetProjectsParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the invoices get projects params
func (o *InvoicesGetProjectsParams) SetClientID(clientID int32) {
	o.ClientID = clientID
}

// WithTimeRangeEndTime adds the timeRangeEndTime to the invoices get projects params
func (o *InvoicesGetProjectsParams) WithTimeRangeEndTime(timeRangeEndTime *strfmt.DateTime) *InvoicesGetProjectsParams {
	o.SetTimeRangeEndTime(timeRangeEndTime)
	return o
}

// SetTimeRangeEndTime adds the timeRangeEndTime to the invoices get projects params
func (o *InvoicesGetProjectsParams) SetTimeRangeEndTime(timeRangeEndTime *strfmt.DateTime) {
	o.TimeRangeEndTime = timeRangeEndTime
}

// WithTimeRangeStartTime adds the timeRangeStartTime to the invoices get projects params
func (o *InvoicesGetProjectsParams) WithTimeRangeStartTime(timeRangeStartTime *strfmt.DateTime) *InvoicesGetProjectsParams {
	o.SetTimeRangeStartTime(timeRangeStartTime)
	return o
}

// SetTimeRangeStartTime adds the timeRangeStartTime to the invoices get projects params
func (o *InvoicesGetProjectsParams) SetTimeRangeStartTime(timeRangeStartTime *strfmt.DateTime) {
	o.TimeRangeStartTime = timeRangeStartTime
}

// WriteToRequest writes these params to a swagger request
func (o *InvoicesGetProjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	// query param clientId
	qrClientID := o.ClientID
	qClientID := swag.FormatInt32(qrClientID)
	if qClientID != "" {
		if err := r.SetQueryParam("clientId", qClientID); err != nil {
			return err
		}
	}

	if o.TimeRangeEndTime != nil {

		// query param timeRange.endTime
		var qrTimeRangeEndTime strfmt.DateTime
		if o.TimeRangeEndTime != nil {
			qrTimeRangeEndTime = *o.TimeRangeEndTime
		}
		qTimeRangeEndTime := qrTimeRangeEndTime.String()
		if qTimeRangeEndTime != "" {
			if err := r.SetQueryParam("timeRange.endTime", qTimeRangeEndTime); err != nil {
				return err
			}
		}

	}

	if o.TimeRangeStartTime != nil {

		// query param timeRange.startTime
		var qrTimeRangeStartTime strfmt.DateTime
		if o.TimeRangeStartTime != nil {
			qrTimeRangeStartTime = *o.TimeRangeStartTime
		}
		qTimeRangeStartTime := qrTimeRangeStartTime.String()
		if qTimeRangeStartTime != "" {
			if err := r.SetQueryParam("timeRange.startTime", qTimeRangeStartTime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
