// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewActivityGetScreenshotsParams creates a new ActivityGetScreenshotsParams object
// with the default values initialized.
func NewActivityGetScreenshotsParams() *ActivityGetScreenshotsParams {
	var ()
	return &ActivityGetScreenshotsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewActivityGetScreenshotsParamsWithTimeout creates a new ActivityGetScreenshotsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewActivityGetScreenshotsParamsWithTimeout(timeout time.Duration) *ActivityGetScreenshotsParams {
	var ()
	return &ActivityGetScreenshotsParams{

		timeout: timeout,
	}
}

// NewActivityGetScreenshotsParamsWithContext creates a new ActivityGetScreenshotsParams object
// with the default values initialized, and the ability to set a context for a request
func NewActivityGetScreenshotsParamsWithContext(ctx context.Context) *ActivityGetScreenshotsParams {
	var ()
	return &ActivityGetScreenshotsParams{

		Context: ctx,
	}
}

// NewActivityGetScreenshotsParamsWithHTTPClient creates a new ActivityGetScreenshotsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewActivityGetScreenshotsParamsWithHTTPClient(client *http.Client) *ActivityGetScreenshotsParams {
	var ()
	return &ActivityGetScreenshotsParams{
		HTTPClient: client,
	}
}

/*ActivityGetScreenshotsParams contains all the parameters to send to the API endpoint
for the activity get screenshots operation typically these are written to a http.Request
*/
type ActivityGetScreenshotsParams struct {

	/*AccountID*/
	AccountID int32
	/*Date*/
	Date strfmt.DateTime
	/*UserProfileID*/
	UserProfileID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) WithTimeout(timeout time.Duration) *ActivityGetScreenshotsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) WithContext(ctx context.Context) *ActivityGetScreenshotsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) WithHTTPClient(client *http.Client) *ActivityGetScreenshotsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) WithAccountID(accountID int32) *ActivityGetScreenshotsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithDate adds the date to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) WithDate(date strfmt.DateTime) *ActivityGetScreenshotsParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) SetDate(date strfmt.DateTime) {
	o.Date = date
}

// WithUserProfileID adds the userProfileID to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) WithUserProfileID(userProfileID int32) *ActivityGetScreenshotsParams {
	o.SetUserProfileID(userProfileID)
	return o
}

// SetUserProfileID adds the userProfileId to the activity get screenshots params
func (o *ActivityGetScreenshotsParams) SetUserProfileID(userProfileID int32) {
	o.UserProfileID = userProfileID
}

// WriteToRequest writes these params to a swagger request
func (o *ActivityGetScreenshotsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	// query param date
	qrDate := o.Date
	qDate := qrDate.String()
	if qDate != "" {
		if err := r.SetQueryParam("date", qDate); err != nil {
			return err
		}
	}

	// query param userProfileId
	qrUserProfileID := o.UserProfileID
	qUserProfileID := swag.FormatInt32(qrUserProfileID)
	if qUserProfileID != "" {
		if err := r.SetQueryParam("userProfileId", qUserProfileID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
