// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AccountsDeleteAccount(params *AccountsDeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsDeleteAccountNoContent, error)

	AccountsGetAccount(params *AccountsGetAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsGetAccountOK, error)

	AccountsGetAccountScope(params *AccountsGetAccountScopeParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsGetAccountScopeOK, error)

	AccountsGetCurrencies(params *AccountsGetCurrenciesParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsGetCurrenciesOK, error)

	AccountsGetLogoToken(params *AccountsGetLogoTokenParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsGetLogoTokenOK, error)

	AccountsPostAccount(params *AccountsPostAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsPostAccountOK, error)

	AccountsPutAccount(params *AccountsPutAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsPutAccountNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AccountsDeleteAccount deletes account
*/
func (a *Client) AccountsDeleteAccount(params *AccountsDeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsDeleteAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsDeleteAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Accounts_DeleteAccount",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsDeleteAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsDeleteAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_DeleteAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountsGetAccount gets account
*/
func (a *Client) AccountsGetAccount(params *AccountsGetAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsGetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsGetAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Accounts_GetAccount",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsGetAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsGetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_GetAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountsGetAccountScope gets account scope
*/
func (a *Client) AccountsGetAccountScope(params *AccountsGetAccountScopeParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsGetAccountScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsGetAccountScopeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Accounts_GetAccountScope",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/scope",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsGetAccountScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsGetAccountScopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_GetAccountScope: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountsGetCurrencies gets currencies list for account
*/
func (a *Client) AccountsGetCurrencies(params *AccountsGetCurrenciesParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsGetCurrenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsGetCurrenciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Accounts_GetCurrencies",
		Method:             "GET",
		PathPattern:        "/api/accounts/currencies",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsGetCurrenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsGetCurrenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_GetCurrencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountsGetLogoToken accounts get logo token API
*/
func (a *Client) AccountsGetLogoToken(params *AccountsGetLogoTokenParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsGetLogoTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsGetLogoTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Accounts_GetLogoToken",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/logotoken",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsGetLogoTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsGetLogoTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_GetLogoToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountsPostAccount creates account
*/
func (a *Client) AccountsPostAccount(params *AccountsPostAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsPostAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsPostAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Accounts_PostAccount",
		Method:             "POST",
		PathPattern:        "/api/accounts",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsPostAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsPostAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_PostAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AccountsPutAccount edits account
*/
func (a *Client) AccountsPutAccount(params *AccountsPutAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AccountsPutAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsPutAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Accounts_PutAccount",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountsPutAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsPutAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Accounts_PutAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
