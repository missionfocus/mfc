// Code generated by go-swagger; DO NOT EDIT.

package time_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTimeEntriesGetTimeEntriesParams creates a new TimeEntriesGetTimeEntriesParams object
// with the default values initialized.
func NewTimeEntriesGetTimeEntriesParams() *TimeEntriesGetTimeEntriesParams {
	var ()
	return &TimeEntriesGetTimeEntriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTimeEntriesGetTimeEntriesParamsWithTimeout creates a new TimeEntriesGetTimeEntriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimeEntriesGetTimeEntriesParamsWithTimeout(timeout time.Duration) *TimeEntriesGetTimeEntriesParams {
	var ()
	return &TimeEntriesGetTimeEntriesParams{

		timeout: timeout,
	}
}

// NewTimeEntriesGetTimeEntriesParamsWithContext creates a new TimeEntriesGetTimeEntriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimeEntriesGetTimeEntriesParamsWithContext(ctx context.Context) *TimeEntriesGetTimeEntriesParams {
	var ()
	return &TimeEntriesGetTimeEntriesParams{

		Context: ctx,
	}
}

// NewTimeEntriesGetTimeEntriesParamsWithHTTPClient creates a new TimeEntriesGetTimeEntriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimeEntriesGetTimeEntriesParamsWithHTTPClient(client *http.Client) *TimeEntriesGetTimeEntriesParams {
	var ()
	return &TimeEntriesGetTimeEntriesParams{
		HTTPClient: client,
	}
}

/*TimeEntriesGetTimeEntriesParams contains all the parameters to send to the API endpoint
for the time entries get time entries operation typically these are written to a http.Request
*/
type TimeEntriesGetTimeEntriesParams struct {

	/*AccountID*/
	AccountID int32
	/*IncludeDeleted*/
	IncludeDeleted *bool
	/*LatestVersions*/
	LatestVersions *int32
	/*TimeRangeEndTime*/
	TimeRangeEndTime *strfmt.DateTime
	/*TimeRangeStartTime*/
	TimeRangeStartTime *strfmt.DateTime
	/*Truncate*/
	Truncate *bool
	/*UseUtcTime*/
	UseUtcTime *bool
	/*UserProfileID*/
	UserProfileID int32
	/*Version*/
	Version *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithTimeout(timeout time.Duration) *TimeEntriesGetTimeEntriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithContext(ctx context.Context) *TimeEntriesGetTimeEntriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithHTTPClient(client *http.Client) *TimeEntriesGetTimeEntriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithAccountID(accountID int32) *TimeEntriesGetTimeEntriesParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithIncludeDeleted adds the includeDeleted to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithIncludeDeleted(includeDeleted *bool) *TimeEntriesGetTimeEntriesParams {
	o.SetIncludeDeleted(includeDeleted)
	return o
}

// SetIncludeDeleted adds the includeDeleted to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetIncludeDeleted(includeDeleted *bool) {
	o.IncludeDeleted = includeDeleted
}

// WithLatestVersions adds the latestVersions to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithLatestVersions(latestVersions *int32) *TimeEntriesGetTimeEntriesParams {
	o.SetLatestVersions(latestVersions)
	return o
}

// SetLatestVersions adds the latestVersions to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetLatestVersions(latestVersions *int32) {
	o.LatestVersions = latestVersions
}

// WithTimeRangeEndTime adds the timeRangeEndTime to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithTimeRangeEndTime(timeRangeEndTime *strfmt.DateTime) *TimeEntriesGetTimeEntriesParams {
	o.SetTimeRangeEndTime(timeRangeEndTime)
	return o
}

// SetTimeRangeEndTime adds the timeRangeEndTime to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetTimeRangeEndTime(timeRangeEndTime *strfmt.DateTime) {
	o.TimeRangeEndTime = timeRangeEndTime
}

// WithTimeRangeStartTime adds the timeRangeStartTime to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithTimeRangeStartTime(timeRangeStartTime *strfmt.DateTime) *TimeEntriesGetTimeEntriesParams {
	o.SetTimeRangeStartTime(timeRangeStartTime)
	return o
}

// SetTimeRangeStartTime adds the timeRangeStartTime to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetTimeRangeStartTime(timeRangeStartTime *strfmt.DateTime) {
	o.TimeRangeStartTime = timeRangeStartTime
}

// WithTruncate adds the truncate to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithTruncate(truncate *bool) *TimeEntriesGetTimeEntriesParams {
	o.SetTruncate(truncate)
	return o
}

// SetTruncate adds the truncate to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetTruncate(truncate *bool) {
	o.Truncate = truncate
}

// WithUseUtcTime adds the useUtcTime to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithUseUtcTime(useUtcTime *bool) *TimeEntriesGetTimeEntriesParams {
	o.SetUseUtcTime(useUtcTime)
	return o
}

// SetUseUtcTime adds the useUtcTime to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetUseUtcTime(useUtcTime *bool) {
	o.UseUtcTime = useUtcTime
}

// WithUserProfileID adds the userProfileID to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithUserProfileID(userProfileID int32) *TimeEntriesGetTimeEntriesParams {
	o.SetUserProfileID(userProfileID)
	return o
}

// SetUserProfileID adds the userProfileId to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetUserProfileID(userProfileID int32) {
	o.UserProfileID = userProfileID
}

// WithVersion adds the version to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) WithVersion(version *int32) *TimeEntriesGetTimeEntriesParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the time entries get time entries params
func (o *TimeEntriesGetTimeEntriesParams) SetVersion(version *int32) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *TimeEntriesGetTimeEntriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.IncludeDeleted != nil {

		// query param includeDeleted
		var qrIncludeDeleted bool
		if o.IncludeDeleted != nil {
			qrIncludeDeleted = *o.IncludeDeleted
		}
		qIncludeDeleted := swag.FormatBool(qrIncludeDeleted)
		if qIncludeDeleted != "" {
			if err := r.SetQueryParam("includeDeleted", qIncludeDeleted); err != nil {
				return err
			}
		}

	}

	if o.LatestVersions != nil {

		// query param latestVersions
		var qrLatestVersions int32
		if o.LatestVersions != nil {
			qrLatestVersions = *o.LatestVersions
		}
		qLatestVersions := swag.FormatInt32(qrLatestVersions)
		if qLatestVersions != "" {
			if err := r.SetQueryParam("latestVersions", qLatestVersions); err != nil {
				return err
			}
		}

	}

	if o.TimeRangeEndTime != nil {

		// query param timeRange.endTime
		var qrTimeRangeEndTime strfmt.DateTime
		if o.TimeRangeEndTime != nil {
			qrTimeRangeEndTime = *o.TimeRangeEndTime
		}
		qTimeRangeEndTime := qrTimeRangeEndTime.String()
		if qTimeRangeEndTime != "" {
			if err := r.SetQueryParam("timeRange.endTime", qTimeRangeEndTime); err != nil {
				return err
			}
		}

	}

	if o.TimeRangeStartTime != nil {

		// query param timeRange.startTime
		var qrTimeRangeStartTime strfmt.DateTime
		if o.TimeRangeStartTime != nil {
			qrTimeRangeStartTime = *o.TimeRangeStartTime
		}
		qTimeRangeStartTime := qrTimeRangeStartTime.String()
		if qTimeRangeStartTime != "" {
			if err := r.SetQueryParam("timeRange.startTime", qTimeRangeStartTime); err != nil {
				return err
			}
		}

	}

	if o.Truncate != nil {

		// query param truncate
		var qrTruncate bool
		if o.Truncate != nil {
			qrTruncate = *o.Truncate
		}
		qTruncate := swag.FormatBool(qrTruncate)
		if qTruncate != "" {
			if err := r.SetQueryParam("truncate", qTruncate); err != nil {
				return err
			}
		}

	}

	if o.UseUtcTime != nil {

		// query param useUtcTime
		var qrUseUtcTime bool
		if o.UseUtcTime != nil {
			qrUseUtcTime = *o.UseUtcTime
		}
		qUseUtcTime := swag.FormatBool(qrUseUtcTime)
		if qUseUtcTime != "" {
			if err := r.SetQueryParam("useUtcTime", qUseUtcTime); err != nil {
				return err
			}
		}

	}

	// path param userProfileId
	if err := r.SetPathParam("userProfileId", swag.FormatInt32(o.UserProfileID)); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion int32
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt32(qrVersion)
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
