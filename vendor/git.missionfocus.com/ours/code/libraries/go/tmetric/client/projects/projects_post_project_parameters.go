// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"git.missionfocus.com/ours/code/libraries/go/tmetric/models"
)

// NewProjectsPostProjectParams creates a new ProjectsPostProjectParams object
// with the default values initialized.
func NewProjectsPostProjectParams() *ProjectsPostProjectParams {
	var ()
	return &ProjectsPostProjectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectsPostProjectParamsWithTimeout creates a new ProjectsPostProjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectsPostProjectParamsWithTimeout(timeout time.Duration) *ProjectsPostProjectParams {
	var ()
	return &ProjectsPostProjectParams{

		timeout: timeout,
	}
}

// NewProjectsPostProjectParamsWithContext creates a new ProjectsPostProjectParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectsPostProjectParamsWithContext(ctx context.Context) *ProjectsPostProjectParams {
	var ()
	return &ProjectsPostProjectParams{

		Context: ctx,
	}
}

// NewProjectsPostProjectParamsWithHTTPClient creates a new ProjectsPostProjectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectsPostProjectParamsWithHTTPClient(client *http.Client) *ProjectsPostProjectParams {
	var ()
	return &ProjectsPostProjectParams{
		HTTPClient: client,
	}
}

/*ProjectsPostProjectParams contains all the parameters to send to the API endpoint
for the projects post project operation typically these are written to a http.Request
*/
type ProjectsPostProjectParams struct {

	/*AccountID*/
	AccountID int32
	/*Project*/
	Project *models.Project

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the projects post project params
func (o *ProjectsPostProjectParams) WithTimeout(timeout time.Duration) *ProjectsPostProjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the projects post project params
func (o *ProjectsPostProjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the projects post project params
func (o *ProjectsPostProjectParams) WithContext(ctx context.Context) *ProjectsPostProjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the projects post project params
func (o *ProjectsPostProjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the projects post project params
func (o *ProjectsPostProjectParams) WithHTTPClient(client *http.Client) *ProjectsPostProjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the projects post project params
func (o *ProjectsPostProjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the projects post project params
func (o *ProjectsPostProjectParams) WithAccountID(accountID int32) *ProjectsPostProjectParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the projects post project params
func (o *ProjectsPostProjectParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithProject adds the project to the projects post project params
func (o *ProjectsPostProjectParams) WithProject(project *models.Project) *ProjectsPostProjectParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the projects post project params
func (o *ProjectsPostProjectParams) SetProject(project *models.Project) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectsPostProjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.Project != nil {
		if err := r.SetBodyParam(o.Project); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
