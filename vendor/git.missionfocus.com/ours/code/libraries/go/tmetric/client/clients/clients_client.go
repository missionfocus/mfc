// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clients API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clients API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ClientsDeleteClient(params *ClientsDeleteClientParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsDeleteClientNoContent, error)

	ClientsGetClient(params *ClientsGetClientParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsGetClientOK, error)

	ClientsGetClientAvatarToken(params *ClientsGetClientAvatarTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsGetClientAvatarTokenOK, error)

	ClientsGetClients(params *ClientsGetClientsParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsGetClientsOK, error)

	ClientsPostClient(params *ClientsPostClientParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsPostClientOK, error)

	ClientsPutClient(params *ClientsPutClientParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsPutClientNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ClientsDeleteClient deletes the client from the account nulls client identifier in all related projects
*/
func (a *Client) ClientsDeleteClient(params *ClientsDeleteClientParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsDeleteClientNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientsDeleteClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Clients_DeleteClient",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{accountId}/clients/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClientsDeleteClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientsDeleteClientNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Clients_DeleteClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClientsGetClient gets the specific account client
*/
func (a *Client) ClientsGetClient(params *ClientsGetClientParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsGetClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientsGetClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Clients_GetClient",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/clients/{clientId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClientsGetClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientsGetClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Clients_GetClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClientsGetClientAvatarToken clients get client avatar token API
*/
func (a *Client) ClientsGetClientAvatarToken(params *ClientsGetClientAvatarTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsGetClientAvatarTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientsGetClientAvatarTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Clients_GetClientAvatarToken",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/clients/avatartoken",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClientsGetClientAvatarTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientsGetClientAvatarTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Clients_GetClientAvatarToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClientsGetClients gets all clients visible for current member in specific account
*/
func (a *Client) ClientsGetClients(params *ClientsGetClientsParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsGetClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientsGetClientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Clients_GetClients",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/clients",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClientsGetClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientsGetClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Clients_GetClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClientsPostClient posts the new client
*/
func (a *Client) ClientsPostClient(params *ClientsPostClientParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsPostClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientsPostClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Clients_PostClient",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/clients",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClientsPostClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientsPostClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Clients_PostClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClientsPutClient puts the project updates client name and color
*/
func (a *Client) ClientsPutClient(params *ClientsPutClientParams, authInfo runtime.ClientAuthInfoWriter) (*ClientsPutClientNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientsPutClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Clients_PutClient",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{accountId}/clients/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClientsPutClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientsPutClientNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Clients_PutClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
