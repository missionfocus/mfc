// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewInvoicesGetInvoicesParams creates a new InvoicesGetInvoicesParams object
// with the default values initialized.
func NewInvoicesGetInvoicesParams() *InvoicesGetInvoicesParams {
	var ()
	return &InvoicesGetInvoicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewInvoicesGetInvoicesParamsWithTimeout creates a new InvoicesGetInvoicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInvoicesGetInvoicesParamsWithTimeout(timeout time.Duration) *InvoicesGetInvoicesParams {
	var ()
	return &InvoicesGetInvoicesParams{

		timeout: timeout,
	}
}

// NewInvoicesGetInvoicesParamsWithContext creates a new InvoicesGetInvoicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewInvoicesGetInvoicesParamsWithContext(ctx context.Context) *InvoicesGetInvoicesParams {
	var ()
	return &InvoicesGetInvoicesParams{

		Context: ctx,
	}
}

// NewInvoicesGetInvoicesParamsWithHTTPClient creates a new InvoicesGetInvoicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInvoicesGetInvoicesParamsWithHTTPClient(client *http.Client) *InvoicesGetInvoicesParams {
	var ()
	return &InvoicesGetInvoicesParams{
		HTTPClient: client,
	}
}

/*InvoicesGetInvoicesParams contains all the parameters to send to the API endpoint
for the invoices get invoices operation typically these are written to a http.Request
*/
type InvoicesGetInvoicesParams struct {

	/*AccountID*/
	AccountID int32
	/*FilterClientList
	  Gets or sets cluent list for report filter.

	*/
	FilterClientList []int32
	/*FilterEndDate
	  Gets or sets report end date.

	*/
	FilterEndDate *strfmt.DateTime
	/*FilterStartDate
	  Gets or sets report start date.

	*/
	FilterStartDate *strfmt.DateTime
	/*FilterStatus
	  Invoice status filter

	*/
	FilterStatus *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) WithTimeout(timeout time.Duration) *InvoicesGetInvoicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) WithContext(ctx context.Context) *InvoicesGetInvoicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) WithHTTPClient(client *http.Client) *InvoicesGetInvoicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) WithAccountID(accountID int32) *InvoicesGetInvoicesParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithFilterClientList adds the filterClientList to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) WithFilterClientList(filterClientList []int32) *InvoicesGetInvoicesParams {
	o.SetFilterClientList(filterClientList)
	return o
}

// SetFilterClientList adds the filterClientList to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) SetFilterClientList(filterClientList []int32) {
	o.FilterClientList = filterClientList
}

// WithFilterEndDate adds the filterEndDate to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) WithFilterEndDate(filterEndDate *strfmt.DateTime) *InvoicesGetInvoicesParams {
	o.SetFilterEndDate(filterEndDate)
	return o
}

// SetFilterEndDate adds the filterEndDate to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) SetFilterEndDate(filterEndDate *strfmt.DateTime) {
	o.FilterEndDate = filterEndDate
}

// WithFilterStartDate adds the filterStartDate to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) WithFilterStartDate(filterStartDate *strfmt.DateTime) *InvoicesGetInvoicesParams {
	o.SetFilterStartDate(filterStartDate)
	return o
}

// SetFilterStartDate adds the filterStartDate to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) SetFilterStartDate(filterStartDate *strfmt.DateTime) {
	o.FilterStartDate = filterStartDate
}

// WithFilterStatus adds the filterStatus to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) WithFilterStatus(filterStatus *int32) *InvoicesGetInvoicesParams {
	o.SetFilterStatus(filterStatus)
	return o
}

// SetFilterStatus adds the filterStatus to the invoices get invoices params
func (o *InvoicesGetInvoicesParams) SetFilterStatus(filterStatus *int32) {
	o.FilterStatus = filterStatus
}

// WriteToRequest writes these params to a swagger request
func (o *InvoicesGetInvoicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	var valuesFilterClientList []string
	for _, v := range o.FilterClientList {
		valuesFilterClientList = append(valuesFilterClientList, swag.FormatInt32(v))
	}

	joinedFilterClientList := swag.JoinByFormat(valuesFilterClientList, "multi")
	// query array param filter.clientList
	if err := r.SetQueryParam("filter.clientList", joinedFilterClientList...); err != nil {
		return err
	}

	if o.FilterEndDate != nil {

		// query param filter.endDate
		var qrFilterEndDate strfmt.DateTime
		if o.FilterEndDate != nil {
			qrFilterEndDate = *o.FilterEndDate
		}
		qFilterEndDate := qrFilterEndDate.String()
		if qFilterEndDate != "" {
			if err := r.SetQueryParam("filter.endDate", qFilterEndDate); err != nil {
				return err
			}
		}

	}

	if o.FilterStartDate != nil {

		// query param filter.startDate
		var qrFilterStartDate strfmt.DateTime
		if o.FilterStartDate != nil {
			qrFilterStartDate = *o.FilterStartDate
		}
		qFilterStartDate := qrFilterStartDate.String()
		if qFilterStartDate != "" {
			if err := r.SetQueryParam("filter.startDate", qFilterStartDate); err != nil {
				return err
			}
		}

	}

	if o.FilterStatus != nil {

		// query param filter.status
		var qrFilterStatus int32
		if o.FilterStatus != nil {
			qrFilterStatus = *o.FilterStatus
		}
		qFilterStatus := swag.FormatInt32(qrFilterStatus)
		if qFilterStatus != "" {
			if err := r.SetQueryParam("filter.status", qFilterStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
