// Code generated by go-swagger; DO NOT EDIT.

package time_off_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"git.missionfocus.com/ours/code/libraries/go/tmetric/models"
)

// TimeOffRequestsPutTimeOffRequestReader is a Reader for the TimeOffRequestsPutTimeOffRequest structure.
type TimeOffRequestsPutTimeOffRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TimeOffRequestsPutTimeOffRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTimeOffRequestsPutTimeOffRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTimeOffRequestsPutTimeOffRequestOK creates a TimeOffRequestsPutTimeOffRequestOK with default headers values
func NewTimeOffRequestsPutTimeOffRequestOK() *TimeOffRequestsPutTimeOffRequestOK {
	return &TimeOffRequestsPutTimeOffRequestOK{}
}

/*TimeOffRequestsPutTimeOffRequestOK handles this case with default header values.

OK
*/
type TimeOffRequestsPutTimeOffRequestOK struct {
	Payload *models.TimeOffRequest
}

func (o *TimeOffRequestsPutTimeOffRequestOK) Error() string {
	return fmt.Sprintf("[PUT /api/accounts/{accountId}/timeoff/requests/{timeOffRequestId}][%d] timeOffRequestsPutTimeOffRequestOK  %+v", 200, o.Payload)
}

func (o *TimeOffRequestsPutTimeOffRequestOK) GetPayload() *models.TimeOffRequest {
	return o.Payload
}

func (o *TimeOffRequestsPutTimeOffRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TimeOffRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
