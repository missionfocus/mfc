// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectsDeleteProject(params *ProjectsDeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsDeleteProjectNoContent, error)

	ProjectsGetProject(params *ProjectsGetProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsGetProjectOK, error)

	ProjectsGetProjectAvatarToken(params *ProjectsGetProjectAvatarTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsGetProjectAvatarTokenOK, error)

	ProjectsGetProjects(params *ProjectsGetProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsGetProjectsOK, error)

	ProjectsPostProject(params *ProjectsPostProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsPostProjectOK, error)

	ProjectsPostProjects(params *ProjectsPostProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsPostProjectsNoContent, error)

	ProjectsPutProject(params *ProjectsPutProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsPutProjectNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectsDeleteProject deletes project
*/
func (a *Client) ProjectsDeleteProject(params *ProjectsDeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsDeleteProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDeleteProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_DeleteProject",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{accountId}/projects/{projectid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsDeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsDeleteProjectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_DeleteProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsGetProject gets specific project
*/
func (a *Client) ProjectsGetProject(params *ProjectsGetProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsGetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsGetProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_GetProject",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsGetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsGetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_GetProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsGetProjectAvatarToken projects get project avatar token API
*/
func (a *Client) ProjectsGetProjectAvatarToken(params *ProjectsGetProjectAvatarTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsGetProjectAvatarTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsGetProjectAvatarTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_GetProjectAvatarToken",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/projects/avatartoken",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsGetProjectAvatarTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsGetProjectAvatarTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_GetProjectAvatarToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsGetProjects gets the all projects visible for current member
*/
func (a *Client) ProjectsGetProjects(params *ProjectsGetProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsGetProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsGetProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_GetProjects",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/projects",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsGetProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsGetProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_GetProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsPostProject creates project
*/
func (a *Client) ProjectsPostProject(params *ProjectsPostProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsPostProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsPostProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_PostProject",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/projects",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsPostProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsPostProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_PostProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsPostProjects projects post projects API
*/
func (a *Client) ProjectsPostProjects(params *ProjectsPostProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsPostProjectsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsPostProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_PostProjects",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/projects/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsPostProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsPostProjectsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_PostProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsPutProject edits project
*/
func (a *Client) ProjectsPutProject(params *ProjectsPutProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsPutProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsPutProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_PutProject",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{accountId}/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsPutProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsPutProjectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_PutProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
