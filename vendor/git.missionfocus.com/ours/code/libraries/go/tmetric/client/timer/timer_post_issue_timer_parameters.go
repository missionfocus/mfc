// Code generated by go-swagger; DO NOT EDIT.

package timer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"git.missionfocus.com/ours/code/libraries/go/tmetric/models"
)

// NewTimerPostIssueTimerParams creates a new TimerPostIssueTimerParams object
// with the default values initialized.
func NewTimerPostIssueTimerParams() *TimerPostIssueTimerParams {
	var ()
	return &TimerPostIssueTimerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTimerPostIssueTimerParamsWithTimeout creates a new TimerPostIssueTimerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimerPostIssueTimerParamsWithTimeout(timeout time.Duration) *TimerPostIssueTimerParams {
	var ()
	return &TimerPostIssueTimerParams{

		timeout: timeout,
	}
}

// NewTimerPostIssueTimerParamsWithContext creates a new TimerPostIssueTimerParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimerPostIssueTimerParamsWithContext(ctx context.Context) *TimerPostIssueTimerParams {
	var ()
	return &TimerPostIssueTimerParams{

		Context: ctx,
	}
}

// NewTimerPostIssueTimerParamsWithHTTPClient creates a new TimerPostIssueTimerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimerPostIssueTimerParamsWithHTTPClient(client *http.Client) *TimerPostIssueTimerParams {
	var ()
	return &TimerPostIssueTimerParams{
		HTTPClient: client,
	}
}

/*TimerPostIssueTimerParams contains all the parameters to send to the API endpoint
for the timer post issue timer operation typically these are written to a http.Request
*/
type TimerPostIssueTimerParams struct {

	/*AccountID*/
	AccountID int32
	/*Issue*/
	Issue *models.WebToolIssueTimer

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the timer post issue timer params
func (o *TimerPostIssueTimerParams) WithTimeout(timeout time.Duration) *TimerPostIssueTimerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the timer post issue timer params
func (o *TimerPostIssueTimerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the timer post issue timer params
func (o *TimerPostIssueTimerParams) WithContext(ctx context.Context) *TimerPostIssueTimerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the timer post issue timer params
func (o *TimerPostIssueTimerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the timer post issue timer params
func (o *TimerPostIssueTimerParams) WithHTTPClient(client *http.Client) *TimerPostIssueTimerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the timer post issue timer params
func (o *TimerPostIssueTimerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the timer post issue timer params
func (o *TimerPostIssueTimerParams) WithAccountID(accountID int32) *TimerPostIssueTimerParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the timer post issue timer params
func (o *TimerPostIssueTimerParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithIssue adds the issue to the timer post issue timer params
func (o *TimerPostIssueTimerParams) WithIssue(issue *models.WebToolIssueTimer) *TimerPostIssueTimerParams {
	o.SetIssue(issue)
	return o
}

// SetIssue adds the issue to the timer post issue timer params
func (o *TimerPostIssueTimerParams) SetIssue(issue *models.WebToolIssueTimer) {
	o.Issue = issue
}

// WriteToRequest writes these params to a swagger request
func (o *TimerPostIssueTimerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.Issue != nil {
		if err := r.SetBodyParam(o.Issue); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
