// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"git.missionfocus.com/ours/code/libraries/go/tmetric/models"
)

// NewTasksPutTasksParams creates a new TasksPutTasksParams object
// with the default values initialized.
func NewTasksPutTasksParams() *TasksPutTasksParams {
	var ()
	return &TasksPutTasksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTasksPutTasksParamsWithTimeout creates a new TasksPutTasksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTasksPutTasksParamsWithTimeout(timeout time.Duration) *TasksPutTasksParams {
	var ()
	return &TasksPutTasksParams{

		timeout: timeout,
	}
}

// NewTasksPutTasksParamsWithContext creates a new TasksPutTasksParams object
// with the default values initialized, and the ability to set a context for a request
func NewTasksPutTasksParamsWithContext(ctx context.Context) *TasksPutTasksParams {
	var ()
	return &TasksPutTasksParams{

		Context: ctx,
	}
}

// NewTasksPutTasksParamsWithHTTPClient creates a new TasksPutTasksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTasksPutTasksParamsWithHTTPClient(client *http.Client) *TasksPutTasksParams {
	var ()
	return &TasksPutTasksParams{
		HTTPClient: client,
	}
}

/*TasksPutTasksParams contains all the parameters to send to the API endpoint
for the tasks put tasks operation typically these are written to a http.Request
*/
type TasksPutTasksParams struct {

	/*AccountID*/
	AccountID int32
	/*TaskID*/
	TaskID []int32
	/*Tasks*/
	Tasks []*models.ProjectTask

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the tasks put tasks params
func (o *TasksPutTasksParams) WithTimeout(timeout time.Duration) *TasksPutTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tasks put tasks params
func (o *TasksPutTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tasks put tasks params
func (o *TasksPutTasksParams) WithContext(ctx context.Context) *TasksPutTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tasks put tasks params
func (o *TasksPutTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tasks put tasks params
func (o *TasksPutTasksParams) WithHTTPClient(client *http.Client) *TasksPutTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tasks put tasks params
func (o *TasksPutTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the tasks put tasks params
func (o *TasksPutTasksParams) WithAccountID(accountID int32) *TasksPutTasksParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the tasks put tasks params
func (o *TasksPutTasksParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithTaskID adds the taskID to the tasks put tasks params
func (o *TasksPutTasksParams) WithTaskID(taskID []int32) *TasksPutTasksParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the tasks put tasks params
func (o *TasksPutTasksParams) SetTaskID(taskID []int32) {
	o.TaskID = taskID
}

// WithTasks adds the tasks to the tasks put tasks params
func (o *TasksPutTasksParams) WithTasks(tasks []*models.ProjectTask) *TasksPutTasksParams {
	o.SetTasks(tasks)
	return o
}

// SetTasks adds the tasks to the tasks put tasks params
func (o *TasksPutTasksParams) SetTasks(tasks []*models.ProjectTask) {
	o.Tasks = tasks
}

// WriteToRequest writes these params to a swagger request
func (o *TasksPutTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	var valuesTaskID []string
	for _, v := range o.TaskID {
		valuesTaskID = append(valuesTaskID, swag.FormatInt32(v))
	}

	joinedTaskID := swag.JoinByFormat(valuesTaskID, "multi")
	// query array param taskId
	if err := r.SetQueryParam("taskId", joinedTaskID...); err != nil {
		return err
	}

	if o.Tasks != nil {
		if err := r.SetBodyParam(o.Tasks); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
