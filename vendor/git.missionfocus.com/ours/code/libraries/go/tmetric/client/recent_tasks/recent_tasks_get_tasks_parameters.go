// Code generated by go-swagger; DO NOT EDIT.

package recent_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRecentTasksGetTasksParams creates a new RecentTasksGetTasksParams object
// with the default values initialized.
func NewRecentTasksGetTasksParams() *RecentTasksGetTasksParams {
	var ()
	return &RecentTasksGetTasksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRecentTasksGetTasksParamsWithTimeout creates a new RecentTasksGetTasksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRecentTasksGetTasksParamsWithTimeout(timeout time.Duration) *RecentTasksGetTasksParams {
	var ()
	return &RecentTasksGetTasksParams{

		timeout: timeout,
	}
}

// NewRecentTasksGetTasksParamsWithContext creates a new RecentTasksGetTasksParams object
// with the default values initialized, and the ability to set a context for a request
func NewRecentTasksGetTasksParamsWithContext(ctx context.Context) *RecentTasksGetTasksParams {
	var ()
	return &RecentTasksGetTasksParams{

		Context: ctx,
	}
}

// NewRecentTasksGetTasksParamsWithHTTPClient creates a new RecentTasksGetTasksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRecentTasksGetTasksParamsWithHTTPClient(client *http.Client) *RecentTasksGetTasksParams {
	var ()
	return &RecentTasksGetTasksParams{
		HTTPClient: client,
	}
}

/*RecentTasksGetTasksParams contains all the parameters to send to the API endpoint
for the recent tasks get tasks operation typically these are written to a http.Request
*/
type RecentTasksGetTasksParams struct {

	/*AccountID*/
	AccountID int32
	/*IncludeEmpty*/
	IncludeEmpty *bool
	/*TaskCount*/
	TaskCount *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) WithTimeout(timeout time.Duration) *RecentTasksGetTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) WithContext(ctx context.Context) *RecentTasksGetTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) WithHTTPClient(client *http.Client) *RecentTasksGetTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) WithAccountID(accountID int32) *RecentTasksGetTasksParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithIncludeEmpty adds the includeEmpty to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) WithIncludeEmpty(includeEmpty *bool) *RecentTasksGetTasksParams {
	o.SetIncludeEmpty(includeEmpty)
	return o
}

// SetIncludeEmpty adds the includeEmpty to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) SetIncludeEmpty(includeEmpty *bool) {
	o.IncludeEmpty = includeEmpty
}

// WithTaskCount adds the taskCount to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) WithTaskCount(taskCount *int32) *RecentTasksGetTasksParams {
	o.SetTaskCount(taskCount)
	return o
}

// SetTaskCount adds the taskCount to the recent tasks get tasks params
func (o *RecentTasksGetTasksParams) SetTaskCount(taskCount *int32) {
	o.TaskCount = taskCount
}

// WriteToRequest writes these params to a swagger request
func (o *RecentTasksGetTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.IncludeEmpty != nil {

		// query param includeEmpty
		var qrIncludeEmpty bool
		if o.IncludeEmpty != nil {
			qrIncludeEmpty = *o.IncludeEmpty
		}
		qIncludeEmpty := swag.FormatBool(qrIncludeEmpty)
		if qIncludeEmpty != "" {
			if err := r.SetQueryParam("includeEmpty", qIncludeEmpty); err != nil {
				return err
			}
		}

	}

	if o.TaskCount != nil {

		// query param taskCount
		var qrTaskCount int32
		if o.TaskCount != nil {
			qrTaskCount = *o.TaskCount
		}
		qTaskCount := swag.FormatInt32(qrTaskCount)
		if qTaskCount != "" {
			if err := r.SetQueryParam("taskCount", qTaskCount); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
