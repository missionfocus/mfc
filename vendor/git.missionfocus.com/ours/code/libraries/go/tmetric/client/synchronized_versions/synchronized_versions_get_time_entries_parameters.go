// Code generated by go-swagger; DO NOT EDIT.

package synchronized_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSynchronizedVersionsGetTimeEntriesParams creates a new SynchronizedVersionsGetTimeEntriesParams object
// with the default values initialized.
func NewSynchronizedVersionsGetTimeEntriesParams() *SynchronizedVersionsGetTimeEntriesParams {
	var ()
	return &SynchronizedVersionsGetTimeEntriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSynchronizedVersionsGetTimeEntriesParamsWithTimeout creates a new SynchronizedVersionsGetTimeEntriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSynchronizedVersionsGetTimeEntriesParamsWithTimeout(timeout time.Duration) *SynchronizedVersionsGetTimeEntriesParams {
	var ()
	return &SynchronizedVersionsGetTimeEntriesParams{

		timeout: timeout,
	}
}

// NewSynchronizedVersionsGetTimeEntriesParamsWithContext creates a new SynchronizedVersionsGetTimeEntriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSynchronizedVersionsGetTimeEntriesParamsWithContext(ctx context.Context) *SynchronizedVersionsGetTimeEntriesParams {
	var ()
	return &SynchronizedVersionsGetTimeEntriesParams{

		Context: ctx,
	}
}

// NewSynchronizedVersionsGetTimeEntriesParamsWithHTTPClient creates a new SynchronizedVersionsGetTimeEntriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSynchronizedVersionsGetTimeEntriesParamsWithHTTPClient(client *http.Client) *SynchronizedVersionsGetTimeEntriesParams {
	var ()
	return &SynchronizedVersionsGetTimeEntriesParams{
		HTTPClient: client,
	}
}

/*SynchronizedVersionsGetTimeEntriesParams contains all the parameters to send to the API endpoint
for the synchronized versions get time entries operation typically these are written to a http.Request
*/
type SynchronizedVersionsGetTimeEntriesParams struct {

	/*AccountID*/
	AccountID string
	/*AccountMemberID*/
	AccountMemberID int32
	/*IncludeAllTasks*/
	IncludeAllTasks *bool
	/*IntegrationID*/
	IntegrationID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) WithTimeout(timeout time.Duration) *SynchronizedVersionsGetTimeEntriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) WithContext(ctx context.Context) *SynchronizedVersionsGetTimeEntriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) WithHTTPClient(client *http.Client) *SynchronizedVersionsGetTimeEntriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) WithAccountID(accountID string) *SynchronizedVersionsGetTimeEntriesParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithAccountMemberID adds the accountMemberID to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) WithAccountMemberID(accountMemberID int32) *SynchronizedVersionsGetTimeEntriesParams {
	o.SetAccountMemberID(accountMemberID)
	return o
}

// SetAccountMemberID adds the accountMemberId to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) SetAccountMemberID(accountMemberID int32) {
	o.AccountMemberID = accountMemberID
}

// WithIncludeAllTasks adds the includeAllTasks to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) WithIncludeAllTasks(includeAllTasks *bool) *SynchronizedVersionsGetTimeEntriesParams {
	o.SetIncludeAllTasks(includeAllTasks)
	return o
}

// SetIncludeAllTasks adds the includeAllTasks to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) SetIncludeAllTasks(includeAllTasks *bool) {
	o.IncludeAllTasks = includeAllTasks
}

// WithIntegrationID adds the integrationID to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) WithIntegrationID(integrationID int32) *SynchronizedVersionsGetTimeEntriesParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the synchronized versions get time entries params
func (o *SynchronizedVersionsGetTimeEntriesParams) SetIntegrationID(integrationID int32) {
	o.IntegrationID = integrationID
}

// WriteToRequest writes these params to a swagger request
func (o *SynchronizedVersionsGetTimeEntriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID); err != nil {
		return err
	}

	// query param accountMemberId
	qrAccountMemberID := o.AccountMemberID
	qAccountMemberID := swag.FormatInt32(qrAccountMemberID)
	if qAccountMemberID != "" {
		if err := r.SetQueryParam("accountMemberId", qAccountMemberID); err != nil {
			return err
		}
	}

	if o.IncludeAllTasks != nil {

		// query param includeAllTasks
		var qrIncludeAllTasks bool
		if o.IncludeAllTasks != nil {
			qrIncludeAllTasks = *o.IncludeAllTasks
		}
		qIncludeAllTasks := swag.FormatBool(qrIncludeAllTasks)
		if qIncludeAllTasks != "" {
			if err := r.SetQueryParam("includeAllTasks", qIncludeAllTasks); err != nil {
				return err
			}
		}

	}

	// path param integrationId
	if err := r.SetPathParam("integrationId", swag.FormatInt32(o.IntegrationID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
