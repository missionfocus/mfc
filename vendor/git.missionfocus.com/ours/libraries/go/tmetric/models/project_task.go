// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectTask project task
//
// swagger:model ProjectTask
type ProjectTask struct {

	// assignee
	Assignee *UserProfile `json:"assignee,omitempty"`

	// assignee Id
	AssigneeID int32 `json:"assigneeId,omitempty"`

	// Gets or sets budget size.
	// Can be a money or hours.
	// Minimum: 0
	BudgetSize *float64 `json:"budgetSize,omitempty"`

	// creator Id
	CreatorID int32 `json:"creatorId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// external issue Id
	ExternalIssueID string `json:"externalIssueId,omitempty"`

	// integration Id
	IntegrationID int32 `json:"integrationId,omitempty"`

	// integration Url
	IntegrationURL string `json:"integrationUrl,omitempty"`

	// is completed
	IsCompleted bool `json:"isCompleted,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project task Id
	ProjectTaskID int32 `json:"projectTaskId,omitempty"`

	// relative issue Url
	RelativeIssueURL string `json:"relativeIssueUrl,omitempty"`

	// show issue Id
	ShowIssueID bool `json:"showIssueId,omitempty"`

	// Gets or sets the tags identifiers.
	TagsIdentifiers []int32 `json:"tagsIdentifiers"`
}

// Validate validates this project task
func (m *ProjectTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectTask) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	if m.Assignee != nil {
		if err := m.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignee")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectTask) validateBudgetSize(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetSize) { // not required
		return nil
	}

	if err := validate.Minimum("budgetSize", "body", float64(*m.BudgetSize), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectTask) UnmarshalBinary(b []byte) error {
	var res ProjectTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
