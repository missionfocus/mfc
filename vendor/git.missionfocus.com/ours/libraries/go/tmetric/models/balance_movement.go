// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BalanceMovement balance movement
//
// swagger:model BalanceMovement
type BalanceMovement struct {

	// action type
	// Enum: [0 1 2 3 4]
	ActionType int32 `json:"actionType,omitempty"`

	// balance hours
	BalanceHours float64 `json:"balanceHours,omitempty"`

	// date
	// Read Only: true
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// delta hours
	DeltaHours float64 `json:"deltaHours,omitempty"`

	// reason
	// Read Only: true
	Reason string `json:"reason,omitempty"`
}

// Validate validates this balance movement
func (m *BalanceMovement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var balanceMovementTypeActionTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		balanceMovementTypeActionTypePropEnum = append(balanceMovementTypeActionTypePropEnum, v)
	}
}

// prop value enum
func (m *BalanceMovement) validateActionTypeEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, balanceMovementTypeActionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BalanceMovement) validateActionType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

func (m *BalanceMovement) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BalanceMovement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BalanceMovement) UnmarshalBinary(b []byte) error {
	var res BalanceMovement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
