// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectsUpdate projects update
//
// swagger:model ProjectsUpdate
type ProjectsUpdate struct {

	// Undefined - without change, 0 - 'No client'
	ClientID int32 `json:"clientId,omitempty"`

	// Undefined - without change
	// Enum: [1 2 3]
	ProjectStatus int32 `json:"projectStatus,omitempty"`

	// Projects identifiers
	Projects []int32 `json:"projects"`
}

// Validate validates this projects update
func (m *ProjectsUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectsUpdateTypeProjectStatusPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectsUpdateTypeProjectStatusPropEnum = append(projectsUpdateTypeProjectStatusPropEnum, v)
	}
}

// prop value enum
func (m *ProjectsUpdate) validateProjectStatusEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectsUpdateTypeProjectStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectsUpdate) validateProjectStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProjectStatusEnum("projectStatus", "body", m.ProjectStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectsUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectsUpdate) UnmarshalBinary(b []byte) error {
	var res ProjectsUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
