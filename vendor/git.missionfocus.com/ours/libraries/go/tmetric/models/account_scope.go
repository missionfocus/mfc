// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountScope account scope
//
// swagger:model AccountScope
type AccountScope struct {

	// account
	Account *Account `json:"account,omitempty"`

	// Gets activity capture settings.
	ActivityCaptureSettings *ActivityCaptureSettingsMap `json:"activityCaptureSettings,omitempty"`

	// Gets or sets all clients.
	Clients []*Client `json:"clients"`

	// Gets current subscription.
	CurrentSubscription *Subscription `json:"currentSubscription,omitempty"`

	// Gets active subscription features.
	Features *SubscriptionFeaturesMap `json:"features,omitempty"`

	// Gets or sets the groups.
	Groups []*MemberListInfo `json:"groups"`

	// Gets or sets the managed groups.
	ManagedGroups []*Subordination `json:"managedGroups"`

	// Gets or sets the identifiers of managed projects.
	ManagedProjects []int32 `json:"managedProjects"`

	// Gets or sets the managed users.
	ManagedUsers []*Subordination `json:"managedUsers"`

	// Gets or sets the members.
	Members []*AccountMember `json:"members"`

	// Gets user permissions.
	Permissions *AccountPermissionsMap `json:"permissions,omitempty"`

	// Gets or sets all projects.
	Projects []*ProjectScope `json:"projects"`

	// Gets user required fields.
	RequiredFields *RequiredFieldsMap `json:"requiredFields,omitempty"`

	// Gets or sets the tags.
	Tags []*Tag `json:"tags"`

	// Gets or sets the identifiers of projects where user can track time.
	TrackedProjects []int32 `json:"trackedProjects"`
}

// Validate validates this account scope
func (m *AccountScope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivityCaptureSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagedGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagedUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountScope) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *AccountScope) validateActivityCaptureSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityCaptureSettings) { // not required
		return nil
	}

	if m.ActivityCaptureSettings != nil {
		if err := m.ActivityCaptureSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activityCaptureSettings")
			}
			return err
		}
	}

	return nil
}

func (m *AccountScope) validateClients(formats strfmt.Registry) error {

	if swag.IsZero(m.Clients) { // not required
		return nil
	}

	for i := 0; i < len(m.Clients); i++ {
		if swag.IsZero(m.Clients[i]) { // not required
			continue
		}

		if m.Clients[i] != nil {
			if err := m.Clients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountScope) validateCurrentSubscription(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentSubscription) { // not required
		return nil
	}

	if m.CurrentSubscription != nil {
		if err := m.CurrentSubscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSubscription")
			}
			return err
		}
	}

	return nil
}

func (m *AccountScope) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if m.Features != nil {
		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *AccountScope) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountScope) validateManagedGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ManagedGroups); i++ {
		if swag.IsZero(m.ManagedGroups[i]) { // not required
			continue
		}

		if m.ManagedGroups[i] != nil {
			if err := m.ManagedGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("managedGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountScope) validateManagedUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.ManagedUsers); i++ {
		if swag.IsZero(m.ManagedUsers[i]) { // not required
			continue
		}

		if m.ManagedUsers[i] != nil {
			if err := m.ManagedUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("managedUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountScope) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountScope) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *AccountScope) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountScope) validateRequiredFields(formats strfmt.Registry) error {

	if swag.IsZero(m.RequiredFields) { // not required
		return nil
	}

	if m.RequiredFields != nil {
		if err := m.RequiredFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requiredFields")
			}
			return err
		}
	}

	return nil
}

func (m *AccountScope) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountScope) UnmarshalBinary(b []byte) error {
	var res AccountScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
