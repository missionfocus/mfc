// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectLite project lite
//
// swagger:model ProjectLite
type ProjectLite struct {

	// account Id
	AccountID int32 `json:"accountId,omitempty"`

	// Gets or sets the relative path to the project avatar.
	// For example, /Content/Avatars/avatar_12.svg.
	Avatar string `json:"avatar,omitempty"`

	// billable amount
	BillableAmount float64 `json:"billableAmount,omitempty"`

	// billable currency
	BillableCurrency string `json:"billableCurrency,omitempty"`

	// budget alert percents
	// Maximum: 100
	// Minimum: 0
	BudgetAlertPercents *int32 `json:"budgetAlertPercents,omitempty"`

	// budget applied date
	// Format: date-time
	BudgetAppliedDate strfmt.DateTime `json:"budgetAppliedDate,omitempty"`

	// budget currency
	BudgetCurrency string `json:"budgetCurrency,omitempty"`

	// budget period
	// Enum: [0 1 2 3]
	BudgetPeriod int32 `json:"budgetPeriod,omitempty"`

	// Gets or sets budget size.
	// Can be a money or hours.
	// Minimum: 0
	BudgetSize *float64 `json:"budgetSize,omitempty"`

	// budgeting method
	// Enum: [0 1 2 3]
	BudgetingMethod int32 `json:"budgetingMethod,omitempty"`

	// Gets or sets the client identifier.
	ClientID int32 `json:"clientId,omitempty"`

	// group count
	GroupCount int32 `json:"groupCount,omitempty"`

	// invoice method
	// Enum: [0 1 2 3 4]
	InvoiceMethod int32 `json:"invoiceMethod,omitempty"`

	// is billable
	IsBillable bool `json:"isBillable,omitempty"`

	// member count
	MemberCount int32 `json:"memberCount,omitempty"`

	// notes
	Notes string `json:"notes,omitempty"`

	// over budget behaviour
	// Enum: [0 1 2]
	OverBudgetBehaviour int32 `json:"overBudgetBehaviour,omitempty"`

	// project code
	ProjectCode string `json:"projectCode,omitempty"`

	// project fee
	// Minimum: 0
	ProjectFee *float64 `json:"projectFee,omitempty"`

	// project fee period
	// Enum: [0 1 2 3]
	ProjectFeePeriod int32 `json:"projectFeePeriod,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// project status
	// Enum: [1 2 3]
	ProjectStatus int32 `json:"projectStatus,omitempty"`

	// spent budget
	SpentBudget float64 `json:"spentBudget,omitempty"`

	// spent rates type
	// Enum: [0 1 2]
	SpentRatesType int32 `json:"spentRatesType,omitempty"`

	// total budget
	TotalBudget float64 `json:"totalBudget,omitempty"`
}

// Validate validates this project lite
func (m *ProjectLite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBudgetAlertPercents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetAppliedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetingMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverBudgetBehaviour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectFeePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpentRatesType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectLite) validateBudgetAlertPercents(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetAlertPercents) { // not required
		return nil
	}

	if err := validate.MinimumInt("budgetAlertPercents", "body", int64(*m.BudgetAlertPercents), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("budgetAlertPercents", "body", int64(*m.BudgetAlertPercents), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *ProjectLite) validateBudgetAppliedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetAppliedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("budgetAppliedDate", "body", "date-time", m.BudgetAppliedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var projectLiteTypeBudgetPeriodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectLiteTypeBudgetPeriodPropEnum = append(projectLiteTypeBudgetPeriodPropEnum, v)
	}
}

// prop value enum
func (m *ProjectLite) validateBudgetPeriodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectLiteTypeBudgetPeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectLite) validateBudgetPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateBudgetPeriodEnum("budgetPeriod", "body", m.BudgetPeriod); err != nil {
		return err
	}

	return nil
}

func (m *ProjectLite) validateBudgetSize(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetSize) { // not required
		return nil
	}

	if err := validate.Minimum("budgetSize", "body", float64(*m.BudgetSize), 0, false); err != nil {
		return err
	}

	return nil
}

var projectLiteTypeBudgetingMethodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectLiteTypeBudgetingMethodPropEnum = append(projectLiteTypeBudgetingMethodPropEnum, v)
	}
}

// prop value enum
func (m *ProjectLite) validateBudgetingMethodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectLiteTypeBudgetingMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectLite) validateBudgetingMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetingMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateBudgetingMethodEnum("budgetingMethod", "body", m.BudgetingMethod); err != nil {
		return err
	}

	return nil
}

var projectLiteTypeInvoiceMethodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectLiteTypeInvoiceMethodPropEnum = append(projectLiteTypeInvoiceMethodPropEnum, v)
	}
}

// prop value enum
func (m *ProjectLite) validateInvoiceMethodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectLiteTypeInvoiceMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectLite) validateInvoiceMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateInvoiceMethodEnum("invoiceMethod", "body", m.InvoiceMethod); err != nil {
		return err
	}

	return nil
}

var projectLiteTypeOverBudgetBehaviourPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectLiteTypeOverBudgetBehaviourPropEnum = append(projectLiteTypeOverBudgetBehaviourPropEnum, v)
	}
}

// prop value enum
func (m *ProjectLite) validateOverBudgetBehaviourEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectLiteTypeOverBudgetBehaviourPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectLite) validateOverBudgetBehaviour(formats strfmt.Registry) error {

	if swag.IsZero(m.OverBudgetBehaviour) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverBudgetBehaviourEnum("overBudgetBehaviour", "body", m.OverBudgetBehaviour); err != nil {
		return err
	}

	return nil
}

func (m *ProjectLite) validateProjectFee(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectFee) { // not required
		return nil
	}

	if err := validate.Minimum("projectFee", "body", float64(*m.ProjectFee), 0, false); err != nil {
		return err
	}

	return nil
}

var projectLiteTypeProjectFeePeriodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectLiteTypeProjectFeePeriodPropEnum = append(projectLiteTypeProjectFeePeriodPropEnum, v)
	}
}

// prop value enum
func (m *ProjectLite) validateProjectFeePeriodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectLiteTypeProjectFeePeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectLite) validateProjectFeePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectFeePeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateProjectFeePeriodEnum("projectFeePeriod", "body", m.ProjectFeePeriod); err != nil {
		return err
	}

	return nil
}

var projectLiteTypeProjectStatusPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectLiteTypeProjectStatusPropEnum = append(projectLiteTypeProjectStatusPropEnum, v)
	}
}

// prop value enum
func (m *ProjectLite) validateProjectStatusEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectLiteTypeProjectStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectLite) validateProjectStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProjectStatusEnum("projectStatus", "body", m.ProjectStatus); err != nil {
		return err
	}

	return nil
}

var projectLiteTypeSpentRatesTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectLiteTypeSpentRatesTypePropEnum = append(projectLiteTypeSpentRatesTypePropEnum, v)
	}
}

// prop value enum
func (m *ProjectLite) validateSpentRatesTypeEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectLiteTypeSpentRatesTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectLite) validateSpentRatesType(formats strfmt.Registry) error {

	if swag.IsZero(m.SpentRatesType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpentRatesTypeEnum("spentRatesType", "body", m.SpentRatesType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectLite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectLite) UnmarshalBinary(b []byte) error {
	var res ProjectLite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
