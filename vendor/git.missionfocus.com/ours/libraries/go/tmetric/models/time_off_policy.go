// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOffPolicy time off policy
//
// swagger:model TimeOffPolicy
type TimeOffPolicy struct {

	// account Id
	AccountID int32 `json:"accountId,omitempty"`

	// accrued hours per period
	AccruedHoursPerPeriod float64 `json:"accruedHoursPerPeriod,omitempty"`

	// allow negative balance
	AllowNegativeBalance bool `json:"allowNegativeBalance,omitempty"`

	// allow only full day request
	AllowOnlyFullDayRequest bool `json:"allowOnlyFullDayRequest,omitempty"`

	// balance maximum hours
	BalanceMaximumHours float64 `json:"balanceMaximumHours,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// members
	Members []*TimeOffPolicyMember `json:"members"`

	// name
	// Required: true
	Name *string `json:"name"`

	// paid
	Paid bool `json:"paid,omitempty"`

	// period
	// Enum: [0 1 2 3 4]
	Period int32 `json:"period,omitempty"`

	// requires approval
	RequiresApproval bool `json:"requiresApproval,omitempty"`

	// reset balance yearly
	ResetBalanceYearly bool `json:"resetBalanceYearly,omitempty"`

	// time off policy Id
	TimeOffPolicyID int32 `json:"timeOffPolicyId,omitempty"`
}

// Validate validates this time off policy
func (m *TimeOffPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOffPolicy) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimeOffPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var timeOffPolicyTypePeriodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeOffPolicyTypePeriodPropEnum = append(timeOffPolicyTypePeriodPropEnum, v)
	}
}

// prop value enum
func (m *TimeOffPolicy) validatePeriodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, timeOffPolicyTypePeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TimeOffPolicy) validatePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.Period) { // not required
		return nil
	}

	// value enum
	if err := m.validatePeriodEnum("period", "body", m.Period); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeOffPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOffPolicy) UnmarshalBinary(b []byte) error {
	var res TimeOffPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
