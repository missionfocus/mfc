// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Project project
//
// swagger:model Project
type Project struct {

	// account Id
	AccountID int32 `json:"accountId,omitempty"`

	// Gets or sets the relative path to the project avatar.
	// For example, /Content/Avatars/avatar_12.svg.
	Avatar string `json:"avatar,omitempty"`

	// budget alert percents
	// Maximum: 100
	// Minimum: 0
	BudgetAlertPercents *int32 `json:"budgetAlertPercents,omitempty"`

	// budget applied date
	// Format: date-time
	BudgetAppliedDate strfmt.DateTime `json:"budgetAppliedDate,omitempty"`

	// budget period
	// Enum: [0 1 2 3]
	BudgetPeriod int32 `json:"budgetPeriod,omitempty"`

	// Gets or sets budget size.
	// Can be a money or hours.
	// Minimum: 0
	BudgetSize *float64 `json:"budgetSize,omitempty"`

	// budgeting method
	// Enum: [0 1 2 3]
	BudgetingMethod int32 `json:"budgetingMethod,omitempty"`

	// Gets or sets the client identifier.
	ClientID int32 `json:"clientId,omitempty"`

	// common billable rate
	CommonBillableRate *Rate `json:"commonBillableRate,omitempty"`

	// groups
	Groups []*ProjectGroup `json:"groups"`

	// invoice method
	// Enum: [0 1 2 3 4]
	InvoiceMethod int32 `json:"invoiceMethod,omitempty"`

	// is billable
	IsBillable bool `json:"isBillable,omitempty"`

	// members
	Members []*ProjectMember `json:"members"`

	// notes
	Notes string `json:"notes,omitempty"`

	// over budget behaviour
	// Enum: [0 1 2]
	OverBudgetBehaviour int32 `json:"overBudgetBehaviour,omitempty"`

	// personal rates
	PersonalRates []*PersonalRate `json:"personalRates"`

	// project code
	ProjectCode string `json:"projectCode,omitempty"`

	// project fee
	// Minimum: 0
	ProjectFee *float64 `json:"projectFee,omitempty"`

	// project fee period
	// Enum: [0 1 2 3]
	ProjectFeePeriod int32 `json:"projectFeePeriod,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// project status
	// Enum: [1 2 3]
	ProjectStatus int32 `json:"projectStatus,omitempty"`

	// spent rates type
	// Enum: [0 1 2]
	SpentRatesType int32 `json:"spentRatesType,omitempty"`

	// work types
	WorkTypes []*ProjectWorkType `json:"workTypes"`
}

// Validate validates this project
func (m *Project) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBudgetAlertPercents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetAppliedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgetingMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonBillableRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverBudgetBehaviour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonalRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectFeePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpentRatesType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) validateBudgetAlertPercents(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetAlertPercents) { // not required
		return nil
	}

	if err := validate.MinimumInt("budgetAlertPercents", "body", int64(*m.BudgetAlertPercents), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("budgetAlertPercents", "body", int64(*m.BudgetAlertPercents), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateBudgetAppliedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetAppliedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("budgetAppliedDate", "body", "date-time", m.BudgetAppliedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var projectTypeBudgetPeriodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeBudgetPeriodPropEnum = append(projectTypeBudgetPeriodPropEnum, v)
	}
}

// prop value enum
func (m *Project) validateBudgetPeriodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectTypeBudgetPeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateBudgetPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateBudgetPeriodEnum("budgetPeriod", "body", m.BudgetPeriod); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateBudgetSize(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetSize) { // not required
		return nil
	}

	if err := validate.Minimum("budgetSize", "body", float64(*m.BudgetSize), 0, false); err != nil {
		return err
	}

	return nil
}

var projectTypeBudgetingMethodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeBudgetingMethodPropEnum = append(projectTypeBudgetingMethodPropEnum, v)
	}
}

// prop value enum
func (m *Project) validateBudgetingMethodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectTypeBudgetingMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateBudgetingMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.BudgetingMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateBudgetingMethodEnum("budgetingMethod", "body", m.BudgetingMethod); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateCommonBillableRate(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonBillableRate) { // not required
		return nil
	}

	if m.CommonBillableRate != nil {
		if err := m.CommonBillableRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonBillableRate")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var projectTypeInvoiceMethodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeInvoiceMethodPropEnum = append(projectTypeInvoiceMethodPropEnum, v)
	}
}

// prop value enum
func (m *Project) validateInvoiceMethodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectTypeInvoiceMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateInvoiceMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateInvoiceMethodEnum("invoiceMethod", "body", m.InvoiceMethod); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var projectTypeOverBudgetBehaviourPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeOverBudgetBehaviourPropEnum = append(projectTypeOverBudgetBehaviourPropEnum, v)
	}
}

// prop value enum
func (m *Project) validateOverBudgetBehaviourEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectTypeOverBudgetBehaviourPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateOverBudgetBehaviour(formats strfmt.Registry) error {

	if swag.IsZero(m.OverBudgetBehaviour) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverBudgetBehaviourEnum("overBudgetBehaviour", "body", m.OverBudgetBehaviour); err != nil {
		return err
	}

	return nil
}

func (m *Project) validatePersonalRates(formats strfmt.Registry) error {

	if swag.IsZero(m.PersonalRates) { // not required
		return nil
	}

	for i := 0; i < len(m.PersonalRates); i++ {
		if swag.IsZero(m.PersonalRates[i]) { // not required
			continue
		}

		if m.PersonalRates[i] != nil {
			if err := m.PersonalRates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("personalRates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) validateProjectFee(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectFee) { // not required
		return nil
	}

	if err := validate.Minimum("projectFee", "body", float64(*m.ProjectFee), 0, false); err != nil {
		return err
	}

	return nil
}

var projectTypeProjectFeePeriodPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeProjectFeePeriodPropEnum = append(projectTypeProjectFeePeriodPropEnum, v)
	}
}

// prop value enum
func (m *Project) validateProjectFeePeriodEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectTypeProjectFeePeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateProjectFeePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectFeePeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateProjectFeePeriodEnum("projectFeePeriod", "body", m.ProjectFeePeriod); err != nil {
		return err
	}

	return nil
}

var projectTypeProjectStatusPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeProjectStatusPropEnum = append(projectTypeProjectStatusPropEnum, v)
	}
}

// prop value enum
func (m *Project) validateProjectStatusEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectTypeProjectStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateProjectStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProjectStatusEnum("projectStatus", "body", m.ProjectStatus); err != nil {
		return err
	}

	return nil
}

var projectTypeSpentRatesTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeSpentRatesTypePropEnum = append(projectTypeSpentRatesTypePropEnum, v)
	}
}

// prop value enum
func (m *Project) validateSpentRatesTypeEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, projectTypeSpentRatesTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateSpentRatesType(formats strfmt.Registry) error {

	if swag.IsZero(m.SpentRatesType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpentRatesTypeEnum("spentRatesType", "body", m.SpentRatesType); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateWorkTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkTypes); i++ {
		if swag.IsZero(m.WorkTypes[i]) { // not required
			continue
		}

		if m.WorkTypes[i] != nil {
			if err := m.WorkTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Project) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Project) UnmarshalBinary(b []byte) error {
	var res Project
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
