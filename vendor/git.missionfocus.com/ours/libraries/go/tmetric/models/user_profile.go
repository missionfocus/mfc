// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserProfile user profile
//
// swagger:model UserProfile
type UserProfile struct {

	// Gets or sets the collection of objects the define the user's membership in service accounts.
	// This collection defines which service accounts the user can access.
	// Accounts where user is locked are not included in the list.
	AccountMembership []interface{} `json:"accountMembership"`

	// active account Id
	ActiveAccountID int32 `json:"activeAccountId,omitempty"`

	// avatar
	Avatar string `json:"avatar,omitempty"`

	// culture info
	CultureInfo *CultureInfoLite `json:"cultureInfo,omitempty"`

	// Gets or sets the date format.
	DateFormat string `json:"dateFormat,omitempty"`

	// email
	// Required: true
	Email *string `json:"email"`

	// Gets or sets a value indicating whether user is authenticated externally (e.g. via Google).
	IsAuthenticatedExternally bool `json:"isAuthenticatedExternally,omitempty"`

	// is registered
	// Read Only: true
	IsRegistered *bool `json:"isRegistered,omitempty"`

	// optin email
	OptinEmail bool `json:"optinEmail,omitempty"`

	// Gets or sets the registration date in UTC.
	// Format: date-time
	RegistrationDate strfmt.DateTime `json:"registrationDate,omitempty"`

	// show breaks
	ShowBreaks bool `json:"showBreaks,omitempty"`

	// Gets or sets the time format.
	TimeFormat string `json:"timeFormat,omitempty"`

	// Gets or sets the time zone information.
	TimeZoneInfo *TimeZoneInfoLite `json:"timeZoneInfo,omitempty"`

	// Gets or sets end-User's full name in displayable form including all name parts,
	// possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
	UserName string `json:"userName,omitempty"`

	// user profile Id
	UserProfileID int32 `json:"userProfileId,omitempty"`
}

// Validate validates this user profile
func (m *UserProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCultureInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZoneInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserProfile) validateCultureInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CultureInfo) { // not required
		return nil
	}

	if m.CultureInfo != nil {
		if err := m.CultureInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cultureInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UserProfile) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) validateRegistrationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistrationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("registrationDate", "body", "date-time", m.RegistrationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) validateTimeZoneInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeZoneInfo) { // not required
		return nil
	}

	if m.TimeZoneInfo != nil {
		if err := m.TimeZoneInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeZoneInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserProfile) UnmarshalBinary(b []byte) error {
	var res UserProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
