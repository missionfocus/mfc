// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimelineEntryDetail Stores the information about the application in which the user was working during the specified timeline entry.
//
// swagger:model TimelineEntryDetail
type TimelineEntryDetail struct {

	// Gets or sets the application's activity time in seconds.
	// Usually, this indicates that a particular window was active.
	ActivitySeconds int32 `json:"activitySeconds,omitempty"`

	// Start time
	// Required: true
	StartTime *string `json:"startTime"`

	// Gets or sets the process that was active.
	TimelineProcess *TimelineProcess `json:"timelineProcess,omitempty"`

	// Gets or sets the foreground window.
	// Read Only: true
	TimelineWindow *TimelineWindow `json:"timelineWindow,omitempty"`

	// total seconds
	TotalSeconds int32 `json:"totalSeconds,omitempty"`

	// Window Text
	// Required: true
	WindowText *string `json:"windowText"`
}

// Validate validates this timeline entry detail
func (m *TimelineEntryDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineProcess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimelineWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindowText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimelineEntryDetail) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *TimelineEntryDetail) validateTimelineProcess(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineProcess) { // not required
		return nil
	}

	if m.TimelineProcess != nil {
		if err := m.TimelineProcess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timelineProcess")
			}
			return err
		}
	}

	return nil
}

func (m *TimelineEntryDetail) validateTimelineWindow(formats strfmt.Registry) error {

	if swag.IsZero(m.TimelineWindow) { // not required
		return nil
	}

	if m.TimelineWindow != nil {
		if err := m.TimelineWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timelineWindow")
			}
			return err
		}
	}

	return nil
}

func (m *TimelineEntryDetail) validateWindowText(formats strfmt.Registry) error {

	if err := validate.Required("windowText", "body", m.WindowText); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimelineEntryDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimelineEntryDetail) UnmarshalBinary(b []byte) error {
	var res TimelineEntryDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
