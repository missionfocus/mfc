// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAccountsDeleteAccountParams creates a new AccountsDeleteAccountParams object
// with the default values initialized.
func NewAccountsDeleteAccountParams() *AccountsDeleteAccountParams {
	var ()
	return &AccountsDeleteAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAccountsDeleteAccountParamsWithTimeout creates a new AccountsDeleteAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAccountsDeleteAccountParamsWithTimeout(timeout time.Duration) *AccountsDeleteAccountParams {
	var ()
	return &AccountsDeleteAccountParams{

		timeout: timeout,
	}
}

// NewAccountsDeleteAccountParamsWithContext creates a new AccountsDeleteAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewAccountsDeleteAccountParamsWithContext(ctx context.Context) *AccountsDeleteAccountParams {
	var ()
	return &AccountsDeleteAccountParams{

		Context: ctx,
	}
}

// NewAccountsDeleteAccountParamsWithHTTPClient creates a new AccountsDeleteAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAccountsDeleteAccountParamsWithHTTPClient(client *http.Client) *AccountsDeleteAccountParams {
	var ()
	return &AccountsDeleteAccountParams{
		HTTPClient: client,
	}
}

/*AccountsDeleteAccountParams contains all the parameters to send to the API endpoint
for the accounts delete account operation typically these are written to a http.Request
*/
type AccountsDeleteAccountParams struct {

	/*AccountID*/
	AccountID int32
	/*Reason*/
	Reason *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithTimeout(timeout time.Duration) *AccountsDeleteAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithContext(ctx context.Context) *AccountsDeleteAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithHTTPClient(client *http.Client) *AccountsDeleteAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithAccountID(accountID int32) *AccountsDeleteAccountParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithReason adds the reason to the accounts delete account params
func (o *AccountsDeleteAccountParams) WithReason(reason *string) *AccountsDeleteAccountParams {
	o.SetReason(reason)
	return o
}

// SetReason adds the reason to the accounts delete account params
func (o *AccountsDeleteAccountParams) SetReason(reason *string) {
	o.Reason = reason
}

// WriteToRequest writes these params to a swagger request
func (o *AccountsDeleteAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	if o.Reason != nil {

		// query param reason
		var qrReason string
		if o.Reason != nil {
			qrReason = *o.Reason
		}
		qReason := qrReason
		if qReason != "" {
			if err := r.SetQueryParam("reason", qReason); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
