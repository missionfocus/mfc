// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	IntegrationsDeleteIntegration(params *IntegrationsDeleteIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsDeleteIntegrationNoContent, error)

	IntegrationsDeleteSynchronization(params *IntegrationsDeleteSynchronizationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsDeleteSynchronizationNoContent, error)

	IntegrationsGetIntegration(params *IntegrationsGetIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsGetIntegrationOK, error)

	IntegrationsGetIntegrations(params *IntegrationsGetIntegrationsParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsGetIntegrationsOK, error)

	IntegrationsGetSynchronizations(params *IntegrationsGetSynchronizationsParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsGetSynchronizationsOK, error)

	IntegrationsPostIntegration(params *IntegrationsPostIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsPostIntegrationOK, error)

	IntegrationsPostSynchronization(params *IntegrationsPostSynchronizationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsPostSynchronizationOK, error)

	IntegrationsPutIntegration(params *IntegrationsPutIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsPutIntegrationNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  IntegrationsDeleteIntegration deletes integration
*/
func (a *Client) IntegrationsDeleteIntegration(params *IntegrationsDeleteIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsDeleteIntegrationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsDeleteIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Integrations_DeleteIntegration",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{accountId}/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsDeleteIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsDeleteIntegrationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_DeleteIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsDeleteSynchronization deletes the synchronization
*/
func (a *Client) IntegrationsDeleteSynchronization(params *IntegrationsDeleteSynchronizationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsDeleteSynchronizationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsDeleteSynchronizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Integrations_DeleteSynchronization",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{accountId}/integrations/sync/{integrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsDeleteSynchronizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsDeleteSynchronizationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_DeleteSynchronization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsGetIntegration gets specific integration
*/
func (a *Client) IntegrationsGetIntegration(params *IntegrationsGetIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsGetIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsGetIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Integrations_GetIntegration",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsGetIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsGetIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_GetIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsGetIntegrations gets integrations list
*/
func (a *Client) IntegrationsGetIntegrations(params *IntegrationsGetIntegrationsParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsGetIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsGetIntegrationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Integrations_GetIntegrations",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/integrations",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsGetIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsGetIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_GetIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsGetSynchronizations syncs scheduled jobs for current account
*/
func (a *Client) IntegrationsGetSynchronizations(params *IntegrationsGetSynchronizationsParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsGetSynchronizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsGetSynchronizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Integrations_GetSynchronizations",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/integrations/sync",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsGetSynchronizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsGetSynchronizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_GetSynchronizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsPostIntegration creates integration
*/
func (a *Client) IntegrationsPostIntegration(params *IntegrationsPostIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsPostIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsPostIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Integrations_PostIntegration",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/integrations",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsPostIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsPostIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_PostIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsPostSynchronization posts the synchronization
*/
func (a *Client) IntegrationsPostSynchronization(params *IntegrationsPostSynchronizationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsPostSynchronizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsPostSynchronizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Integrations_PostSynchronization",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/integrations/sync/{integrationId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsPostSynchronizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsPostSynchronizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_PostSynchronization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsPutIntegration edits integration
*/
func (a *Client) IntegrationsPutIntegration(params *IntegrationsPutIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsPutIntegrationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsPutIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Integrations_PutIntegration",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{accountId}/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsPutIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsPutIntegrationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Integrations_PutIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
