// Code generated by go-swagger; DO NOT EDIT.

package user_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	UserGroupsDeleteGroup(params *UserGroupsDeleteGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsDeleteGroupNoContent, error)

	UserGroupsGetGroup(params *UserGroupsGetGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsGetGroupOK, error)

	UserGroupsGetGroups(params *UserGroupsGetGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsGetGroupsOK, error)

	UserGroupsPostGroup(params *UserGroupsPostGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsPostGroupOK, error)

	UserGroupsPutGroup(params *UserGroupsPutGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsPutGroupNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  UserGroupsDeleteGroup deletes group
*/
func (a *Client) UserGroupsDeleteGroup(params *UserGroupsDeleteGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsDeleteGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGroupsDeleteGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserGroups_DeleteGroup",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{accountId}/usergroups/{userGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGroupsDeleteGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGroupsDeleteGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGroups_DeleteGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserGroupsGetGroup gets team by team id
*/
func (a *Client) UserGroupsGetGroup(params *UserGroupsGetGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsGetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGroupsGetGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserGroups_GetGroup",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/usergroups/{userGroupId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGroupsGetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGroupsGetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGroups_GetGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserGroupsGetGroups gets team list for current account
*/
func (a *Client) UserGroupsGetGroups(params *UserGroupsGetGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsGetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGroupsGetGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserGroups_GetGroups",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/usergroups",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGroupsGetGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGroupsGetGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGroups_GetGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserGroupsPostGroup creates a new team
*/
func (a *Client) UserGroupsPostGroup(params *UserGroupsPostGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsPostGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGroupsPostGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserGroups_PostGroup",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/usergroups",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGroupsPostGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGroupsPostGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGroups_PostGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserGroupsPutGroup edits team
*/
func (a *Client) UserGroupsPutGroup(params *UserGroupsPutGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UserGroupsPutGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGroupsPutGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserGroups_PutGroup",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{accountId}/usergroups/{userGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserGroupsPutGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGroupsPutGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserGroups_PutGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
