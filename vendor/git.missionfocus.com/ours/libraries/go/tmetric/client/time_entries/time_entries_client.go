// Code generated by go-swagger; DO NOT EDIT.

package time_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new time entries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for time entries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TimeEntriesGetGroupTimeEntries(params *TimeEntriesGetGroupTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesGetGroupTimeEntriesOK, error)

	TimeEntriesGetGroupTimeEntriesByUser(params *TimeEntriesGetGroupTimeEntriesByUserParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesGetGroupTimeEntriesByUserOK, error)

	TimeEntriesGetLatestTimeEntry(params *TimeEntriesGetLatestTimeEntryParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesGetLatestTimeEntryOK, error)

	TimeEntriesGetTimeEntries(params *TimeEntriesGetTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesGetTimeEntriesOK, error)

	TimeEntriesPostExternalIssueTimeEntries(params *TimeEntriesPostExternalIssueTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesPostExternalIssueTimeEntriesOK, error)

	TimeEntriesPostTimeEntries(params *TimeEntriesPostTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesPostTimeEntriesOK, error)

	TimeEntriesPostTimeEntry(params *TimeEntriesPostTimeEntryParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesPostTimeEntryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TimeEntriesGetGroupTimeEntries gets time entries for team view for all users of account
*/
func (a *Client) TimeEntriesGetGroupTimeEntries(params *TimeEntriesGetGroupTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesGetGroupTimeEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeEntriesGetGroupTimeEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeEntries_GetGroupTimeEntries",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/timeentries/group",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeEntriesGetGroupTimeEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeEntriesGetGroupTimeEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeEntries_GetGroupTimeEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeEntriesGetGroupTimeEntriesByUser gets time entries for team view for specific user
*/
func (a *Client) TimeEntriesGetGroupTimeEntriesByUser(params *TimeEntriesGetGroupTimeEntriesByUserParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesGetGroupTimeEntriesByUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeEntriesGetGroupTimeEntriesByUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeEntries_GetGroupTimeEntriesByUser",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/timeentries/group/{userGroupId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeEntriesGetGroupTimeEntriesByUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeEntriesGetGroupTimeEntriesByUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeEntries_GetGroupTimeEntriesByUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeEntriesGetLatestTimeEntry time entries get latest time entry API
*/
func (a *Client) TimeEntriesGetLatestTimeEntry(params *TimeEntriesGetLatestTimeEntryParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesGetLatestTimeEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeEntriesGetLatestTimeEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeEntries_GetLatestTimeEntry",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/timeentries/{userProfileId}/latest",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeEntriesGetLatestTimeEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeEntriesGetLatestTimeEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeEntries_GetLatestTimeEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeEntriesGetTimeEntries gets time entries
*/
func (a *Client) TimeEntriesGetTimeEntries(params *TimeEntriesGetTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesGetTimeEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeEntriesGetTimeEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeEntries_GetTimeEntries",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/timeentries/{userProfileId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeEntriesGetTimeEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeEntriesGetTimeEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeEntries_GetTimeEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeEntriesPostExternalIssueTimeEntries creates time entry from extension
*/
func (a *Client) TimeEntriesPostExternalIssueTimeEntries(params *TimeEntriesPostExternalIssueTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesPostExternalIssueTimeEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeEntriesPostExternalIssueTimeEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeEntries_PostExternalIssueTimeEntries",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/timeentries/external/summary",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeEntriesPostExternalIssueTimeEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeEntriesPostExternalIssueTimeEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeEntries_PostExternalIssueTimeEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeEntriesPostTimeEntries edits deletes multiple time entries
*/
func (a *Client) TimeEntriesPostTimeEntries(params *TimeEntriesPostTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesPostTimeEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeEntriesPostTimeEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeEntries_PostTimeEntries",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/timeentries/{userProfileId}/bulk",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeEntriesPostTimeEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeEntriesPostTimeEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeEntries_PostTimeEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeEntriesPostTimeEntry edits deletes single time entry
*/
func (a *Client) TimeEntriesPostTimeEntry(params *TimeEntriesPostTimeEntryParams, authInfo runtime.ClientAuthInfoWriter) (*TimeEntriesPostTimeEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeEntriesPostTimeEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeEntries_PostTimeEntry",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/timeentries/{userProfileId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeEntriesPostTimeEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeEntriesPostTimeEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeEntries_PostTimeEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
