// Code generated by go-swagger; DO NOT EDIT.

package report_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new report tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for report tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ReportTasksGetTasksReport(params *ReportTasksGetTasksReportParams, authInfo runtime.ClientAuthInfoWriter) (*ReportTasksGetTasksReportOK, error)

	ReportTasksGetTasksSummaryCSV(params *ReportTasksGetTasksSummaryCSVParams, authInfo runtime.ClientAuthInfoWriter) (*ReportTasksGetTasksSummaryCSVOK, error)

	ReportTasksGetTasksSummaryPDF(params *ReportTasksGetTasksSummaryPDFParams, authInfo runtime.ClientAuthInfoWriter) (*ReportTasksGetTasksSummaryPDFOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ReportTasksGetTasksReport gets the tasks report
*/
func (a *Client) ReportTasksGetTasksReport(params *ReportTasksGetTasksReportParams, authInfo runtime.ClientAuthInfoWriter) (*ReportTasksGetTasksReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportTasksGetTasksReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReportTasks_GetTasksReport",
		Method:             "GET",
		PathPattern:        "/api/reports/summary/tasks",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportTasksGetTasksReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportTasksGetTasksReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportTasks_GetTasksReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReportTasksGetTasksSummaryCSV gets the tasks report as c s v
*/
func (a *Client) ReportTasksGetTasksSummaryCSV(params *ReportTasksGetTasksSummaryCSVParams, authInfo runtime.ClientAuthInfoWriter) (*ReportTasksGetTasksSummaryCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportTasksGetTasksSummaryCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReportTasks_GetTasksSummaryCSV",
		Method:             "GET",
		PathPattern:        "/api/reports/summary/tasks/csv",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportTasksGetTasksSummaryCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportTasksGetTasksSummaryCSVOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportTasks_GetTasksSummaryCSV: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReportTasksGetTasksSummaryPDF gets the tasks report as p d f
*/
func (a *Client) ReportTasksGetTasksSummaryPDF(params *ReportTasksGetTasksSummaryPDFParams, authInfo runtime.ClientAuthInfoWriter) (*ReportTasksGetTasksSummaryPDFOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReportTasksGetTasksSummaryPDFParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ReportTasks_GetTasksSummaryPDF",
		Method:             "GET",
		PathPattern:        "/api/reports/summary/tasks/pdf",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReportTasksGetTasksSummaryPDFReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReportTasksGetTasksSummaryPDFOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReportTasks_GetTasksSummaryPDF: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
