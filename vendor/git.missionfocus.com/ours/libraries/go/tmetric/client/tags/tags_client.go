// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TagsDeleteTag(params *TagsDeleteTagParams, authInfo runtime.ClientAuthInfoWriter) (*TagsDeleteTagNoContent, error)

	TagsGetTags(params *TagsGetTagsParams, authInfo runtime.ClientAuthInfoWriter) (*TagsGetTagsOK, error)

	TagsGetWorkType(params *TagsGetWorkTypeParams, authInfo runtime.ClientAuthInfoWriter) (*TagsGetWorkTypeOK, error)

	TagsPostTag(params *TagsPostTagParams, authInfo runtime.ClientAuthInfoWriter) (*TagsPostTagOK, error)

	TagsPostTags(params *TagsPostTagsParams, authInfo runtime.ClientAuthInfoWriter) (*TagsPostTagsOK, error)

	TagsPutTag(params *TagsPutTagParams, authInfo runtime.ClientAuthInfoWriter) (*TagsPutTagNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TagsDeleteTag deletes tag or worktype
*/
func (a *Client) TagsDeleteTag(params *TagsDeleteTagParams, authInfo runtime.ClientAuthInfoWriter) (*TagsDeleteTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsDeleteTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Tags_DeleteTag",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{accountId}/tags/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsDeleteTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsDeleteTagNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Tags_DeleteTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsGetTags gets tags list
*/
func (a *Client) TagsGetTags(params *TagsGetTagsParams, authInfo runtime.ClientAuthInfoWriter) (*TagsGetTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsGetTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Tags_GetTags",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/tags",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsGetTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsGetTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Tags_GetTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsGetWorkType gets work type by id
*/
func (a *Client) TagsGetWorkType(params *TagsGetWorkTypeParams, authInfo runtime.ClientAuthInfoWriter) (*TagsGetWorkTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsGetWorkTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Tags_GetWorkType",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/tags/worktypes/{tagId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsGetWorkTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsGetWorkTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Tags_GetWorkType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsPostTag creates tag
*/
func (a *Client) TagsPostTag(params *TagsPostTagParams, authInfo runtime.ClientAuthInfoWriter) (*TagsPostTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsPostTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Tags_PostTag",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/tags",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsPostTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsPostTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Tags_PostTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsPostTags creates multiple tags
*/
func (a *Client) TagsPostTags(params *TagsPostTagsParams, authInfo runtime.ClientAuthInfoWriter) (*TagsPostTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsPostTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Tags_PostTags",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/tags/bulk",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsPostTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsPostTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Tags_PostTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsPutTag edits tag
*/
func (a *Client) TagsPutTag(params *TagsPutTagParams, authInfo runtime.ClientAuthInfoWriter) (*TagsPutTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsPutTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Tags_PutTag",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{accountId}/tags/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsPutTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsPutTagNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Tags_PutTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
