// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTagsGetWorkTypeParams creates a new TagsGetWorkTypeParams object
// with the default values initialized.
func NewTagsGetWorkTypeParams() *TagsGetWorkTypeParams {
	var ()
	return &TagsGetWorkTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTagsGetWorkTypeParamsWithTimeout creates a new TagsGetWorkTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTagsGetWorkTypeParamsWithTimeout(timeout time.Duration) *TagsGetWorkTypeParams {
	var ()
	return &TagsGetWorkTypeParams{

		timeout: timeout,
	}
}

// NewTagsGetWorkTypeParamsWithContext creates a new TagsGetWorkTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewTagsGetWorkTypeParamsWithContext(ctx context.Context) *TagsGetWorkTypeParams {
	var ()
	return &TagsGetWorkTypeParams{

		Context: ctx,
	}
}

// NewTagsGetWorkTypeParamsWithHTTPClient creates a new TagsGetWorkTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTagsGetWorkTypeParamsWithHTTPClient(client *http.Client) *TagsGetWorkTypeParams {
	var ()
	return &TagsGetWorkTypeParams{
		HTTPClient: client,
	}
}

/*TagsGetWorkTypeParams contains all the parameters to send to the API endpoint
for the tags get work type operation typically these are written to a http.Request
*/
type TagsGetWorkTypeParams struct {

	/*AccountID*/
	AccountID int32
	/*TagID*/
	TagID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the tags get work type params
func (o *TagsGetWorkTypeParams) WithTimeout(timeout time.Duration) *TagsGetWorkTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tags get work type params
func (o *TagsGetWorkTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tags get work type params
func (o *TagsGetWorkTypeParams) WithContext(ctx context.Context) *TagsGetWorkTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tags get work type params
func (o *TagsGetWorkTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tags get work type params
func (o *TagsGetWorkTypeParams) WithHTTPClient(client *http.Client) *TagsGetWorkTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tags get work type params
func (o *TagsGetWorkTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the tags get work type params
func (o *TagsGetWorkTypeParams) WithAccountID(accountID int32) *TagsGetWorkTypeParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the tags get work type params
func (o *TagsGetWorkTypeParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithTagID adds the tagID to the tags get work type params
func (o *TagsGetWorkTypeParams) WithTagID(tagID int32) *TagsGetWorkTypeParams {
	o.SetTagID(tagID)
	return o
}

// SetTagID adds the tagId to the tags get work type params
func (o *TagsGetWorkTypeParams) SetTagID(tagID int32) {
	o.TagID = tagID
}

// WriteToRequest writes these params to a swagger request
func (o *TagsGetWorkTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", swag.FormatInt32(o.AccountID)); err != nil {
		return err
	}

	// path param tagId
	if err := r.SetPathParam("tagId", swag.FormatInt32(o.TagID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
