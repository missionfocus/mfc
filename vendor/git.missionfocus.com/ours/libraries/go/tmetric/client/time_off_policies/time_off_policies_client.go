// Code generated by go-swagger; DO NOT EDIT.

package time_off_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new time off policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for time off policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TimeOffPoliciesDeleteTimeOffPolicy(params *TimeOffPoliciesDeleteTimeOffPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesDeleteTimeOffPolicyNoContent, error)

	TimeOffPoliciesGetTimeOffPolicies(params *TimeOffPoliciesGetTimeOffPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesGetTimeOffPoliciesOK, error)

	TimeOffPoliciesGetTimeOffPolicy(params *TimeOffPoliciesGetTimeOffPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesGetTimeOffPolicyOK, error)

	TimeOffPoliciesPostTimeOffPolicy(params *TimeOffPoliciesPostTimeOffPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesPostTimeOffPolicyOK, error)

	TimeOffPoliciesPutTimeOffPolicy(params *TimeOffPoliciesPutTimeOffPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesPutTimeOffPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TimeOffPoliciesDeleteTimeOffPolicy time off policies delete time off policy API
*/
func (a *Client) TimeOffPoliciesDeleteTimeOffPolicy(params *TimeOffPoliciesDeleteTimeOffPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesDeleteTimeOffPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeOffPoliciesDeleteTimeOffPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeOffPolicies_DeleteTimeOffPolicy",
		Method:             "DELETE",
		PathPattern:        "/api/accounts/{accountId}/timeoff/policies/{timeOffPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeOffPoliciesDeleteTimeOffPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeOffPoliciesDeleteTimeOffPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeOffPolicies_DeleteTimeOffPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeOffPoliciesGetTimeOffPolicies time off policies get time off policies API
*/
func (a *Client) TimeOffPoliciesGetTimeOffPolicies(params *TimeOffPoliciesGetTimeOffPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesGetTimeOffPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeOffPoliciesGetTimeOffPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeOffPolicies_GetTimeOffPolicies",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/timeoff/policies",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeOffPoliciesGetTimeOffPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeOffPoliciesGetTimeOffPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeOffPolicies_GetTimeOffPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeOffPoliciesGetTimeOffPolicy time off policies get time off policy API
*/
func (a *Client) TimeOffPoliciesGetTimeOffPolicy(params *TimeOffPoliciesGetTimeOffPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesGetTimeOffPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeOffPoliciesGetTimeOffPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeOffPolicies_GetTimeOffPolicy",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/timeoff/policies/{timeOffPolicyId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeOffPoliciesGetTimeOffPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeOffPoliciesGetTimeOffPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeOffPolicies_GetTimeOffPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeOffPoliciesPostTimeOffPolicy time off policies post time off policy API
*/
func (a *Client) TimeOffPoliciesPostTimeOffPolicy(params *TimeOffPoliciesPostTimeOffPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesPostTimeOffPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeOffPoliciesPostTimeOffPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeOffPolicies_PostTimeOffPolicy",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/timeoff/policies",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeOffPoliciesPostTimeOffPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeOffPoliciesPostTimeOffPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeOffPolicies_PostTimeOffPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeOffPoliciesPutTimeOffPolicy time off policies put time off policy API
*/
func (a *Client) TimeOffPoliciesPutTimeOffPolicy(params *TimeOffPoliciesPutTimeOffPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*TimeOffPoliciesPutTimeOffPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeOffPoliciesPutTimeOffPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimeOffPolicies_PutTimeOffPolicy",
		Method:             "PUT",
		PathPattern:        "/api/accounts/{accountId}/timeoff/policies/{timeOffPolicyId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimeOffPoliciesPutTimeOffPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeOffPoliciesPutTimeOffPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimeOffPolicies_PutTimeOffPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
