// Code generated by go-swagger; DO NOT EDIT.

package user_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	UserProfileDeleteUserProfile(params *UserProfileDeleteUserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileDeleteUserProfileNoContent, error)

	UserProfileGetAccounts(params *UserProfileGetAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileGetAccountsOK, error)

	UserProfileGetCultures(params *UserProfileGetCulturesParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileGetCulturesOK, error)

	UserProfileGetTimeZone(params *UserProfileGetTimeZoneParams, authInfo runtime.ClientAuthInfoWriter) error

	UserProfileGetTimeZones(params *UserProfileGetTimeZonesParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileGetTimeZonesOK, error)

	UserProfileGetUserProfile(params *UserProfileGetUserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileGetUserProfileOK, error)

	UserProfilePostAPIToken(params *UserProfilePostAPITokenParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfilePostAPITokenOK, error)

	UserProfilePostUserProfile(params *UserProfilePostUserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfilePostUserProfileOK, error)

	UserProfilePutUserProfile(params *UserProfilePutUserProfileParams, authInfo runtime.ClientAuthInfoWriter) error

	UserProfileResendEmail(params *UserProfileResendEmailParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileResendEmailOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  UserProfileDeleteUserProfile deletes user profile from forum identity and application
*/
func (a *Client) UserProfileDeleteUserProfile(params *UserProfileDeleteUserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileDeleteUserProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileDeleteUserProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_DeleteUserProfile",
		Method:             "DELETE",
		PathPattern:        "/api/userprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileDeleteUserProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileDeleteUserProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserProfile_DeleteUserProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfileGetAccounts gets the list of accounts that are available for the user this endpoint is used by a zapier trigger
*/
func (a *Client) UserProfileGetAccounts(params *UserProfileGetAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileGetAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileGetAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_GetAccounts",
		Method:             "GET",
		PathPattern:        "/api/userprofile/accounts",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileGetAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileGetAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserProfile_GetAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfileGetCultures user profile get cultures API
*/
func (a *Client) UserProfileGetCultures(params *UserProfileGetCulturesParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileGetCulturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileGetCulturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_GetCultures",
		Method:             "GET",
		PathPattern:        "/api/userprofile/cultures",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileGetCulturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileGetCulturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserProfile_GetCultures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfileGetTimeZone gets user time zone info on specified or current date
*/
func (a *Client) UserProfileGetTimeZone(params *UserProfileGetTimeZoneParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileGetTimeZoneParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_GetTimeZone",
		Method:             "GET",
		PathPattern:        "/api/userprofile/{userProfileId}/timezone",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileGetTimeZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  UserProfileGetTimeZones gets time zones list
*/
func (a *Client) UserProfileGetTimeZones(params *UserProfileGetTimeZonesParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileGetTimeZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileGetTimeZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_GetTimeZones",
		Method:             "GET",
		PathPattern:        "/api/userprofile/timezones",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileGetTimeZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileGetTimeZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserProfile_GetTimeZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfileGetUserProfile gets user profile
*/
func (a *Client) UserProfileGetUserProfile(params *UserProfileGetUserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileGetUserProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileGetUserProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_GetUserProfile",
		Method:             "GET",
		PathPattern:        "/api/userprofile",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileGetUserProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileGetUserProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserProfile_GetUserProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfilePostAPIToken requests an access token for the user the token is valid for 1 year if you request another token the previous token is invalidated
*/
func (a *Client) UserProfilePostAPIToken(params *UserProfilePostAPITokenParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfilePostAPITokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfilePostAPITokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_PostApiToken",
		Method:             "POST",
		PathPattern:        "/api/userprofile/token",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfilePostAPITokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfilePostAPITokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserProfile_PostApiToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfilePostUserProfile generates user profile after registration on identity to add new members you should use api accounts id members bulk
*/
func (a *Client) UserProfilePostUserProfile(params *UserProfilePostUserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfilePostUserProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfilePostUserProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_PostUserProfile",
		Method:             "POST",
		PathPattern:        "/api/userprofile",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfilePostUserProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfilePostUserProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserProfile_PostUserProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserProfilePutUserProfile edits user profile

  You can edit user profile, if it exists in database.
Otherwise, 400 error (Bad Request) will be returned.
*/
func (a *Client) UserProfilePutUserProfile(params *UserProfilePutUserProfileParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfilePutUserProfileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_PutUserProfile",
		Method:             "PUT",
		PathPattern:        "/api/userprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfilePutUserProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  UserProfileResendEmail resends email to verify current user
*/
func (a *Client) UserProfileResendEmail(params *UserProfileResendEmailParams, authInfo runtime.ClientAuthInfoWriter) (*UserProfileResendEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserProfileResendEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserProfile_ResendEmail",
		Method:             "POST",
		PathPattern:        "/api/userprofile/resend",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserProfileResendEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserProfileResendEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UserProfile_ResendEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
