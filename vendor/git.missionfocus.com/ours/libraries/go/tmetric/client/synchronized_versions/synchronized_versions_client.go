// Code generated by go-swagger; DO NOT EDIT.

package synchronized_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new synchronized versions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for synchronized versions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SynchronizedVersionsGetTimeEntries(params *SynchronizedVersionsGetTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizedVersionsGetTimeEntriesOK, error)

	SynchronizedVersionsGetVersions(params *SynchronizedVersionsGetVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizedVersionsGetVersionsOK, error)

	SynchronizedVersionsPostVersion(params *SynchronizedVersionsPostVersionParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizedVersionsPostVersionNoContent, error)

	SynchronizedVersionsPostVersions(params *SynchronizedVersionsPostVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizedVersionsPostVersionsNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SynchronizedVersionsGetTimeEntries synchronized versions get time entries API
*/
func (a *Client) SynchronizedVersionsGetTimeEntries(params *SynchronizedVersionsGetTimeEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizedVersionsGetTimeEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSynchronizedVersionsGetTimeEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SynchronizedVersions_GetTimeEntries",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/integrations/sync/{integrationId}/timeentries",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SynchronizedVersionsGetTimeEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SynchronizedVersionsGetTimeEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SynchronizedVersions_GetTimeEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SynchronizedVersionsGetVersions synchronized versions get versions API
*/
func (a *Client) SynchronizedVersionsGetVersions(params *SynchronizedVersionsGetVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizedVersionsGetVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSynchronizedVersionsGetVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SynchronizedVersions_GetVersions",
		Method:             "GET",
		PathPattern:        "/api/accounts/{accountId}/integrations/sync/{integrationId}/versions",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SynchronizedVersionsGetVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SynchronizedVersionsGetVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SynchronizedVersions_GetVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SynchronizedVersionsPostVersion synchronized versions post version API
*/
func (a *Client) SynchronizedVersionsPostVersion(params *SynchronizedVersionsPostVersionParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizedVersionsPostVersionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSynchronizedVersionsPostVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SynchronizedVersions_PostVersion",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/integrations/sync/{integrationId}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SynchronizedVersionsPostVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SynchronizedVersionsPostVersionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SynchronizedVersions_PostVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SynchronizedVersionsPostVersions synchronized versions post versions API
*/
func (a *Client) SynchronizedVersionsPostVersions(params *SynchronizedVersionsPostVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizedVersionsPostVersionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSynchronizedVersionsPostVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SynchronizedVersions_PostVersions",
		Method:             "POST",
		PathPattern:        "/api/accounts/{accountId}/integrations/sync/{integrationId}/versions/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SynchronizedVersionsPostVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SynchronizedVersionsPostVersionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SynchronizedVersions_PostVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
